{
	"info": {
		"_postman_id": "598df960-9eb6-422d-898a-a5c4c0e63e75",
		"name": "huobi_usdt_swap_online",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "cross_margin_mode",
			"item": [
				{
					"name": "adjustfactor",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{hostName}}/linear-swap-api/v1/swap_cross_adjustfactor",
							"host": [
								"{{hostName}}/linear-swap-api/v1"
							],
							"path": [
								"swap_cross_adjustfactor"
							],
							"query": [
								{
									"key": "contract_code",
									"value": "BTC-USDT",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "transfer_state",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{hostName}}/linear-swap-api/v1/swap_cross_transfer_state?margin_account=USDT",
							"host": [
								"{{hostName}}/linear-swap-api/v1"
							],
							"path": [
								"swap_cross_transfer_state"
							],
							"query": [
								{
									"key": "margin_account",
									"value": "USDT"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "trade_state",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{hostName}}/linear-swap-api/v1/swap_cross_trade_state?contract_code=BTC-USDT",
							"host": [
								"{{hostName}}/linear-swap-api/v1"
							],
							"path": [
								"swap_cross_trade_state"
							],
							"query": [
								{
									"key": "contract_code",
									"value": "BTC-USDT"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "swap_cross_ladder_margin",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{hostName}}/linear-swap-api/v1/swap_cross_ladder_margin?contract_code=btc-usdt",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"linear-swap-api",
								"v1",
								"swap_cross_ladder_margin"
							],
							"query": [
								{
									"key": "contract_code",
									"value": "btc-usdt"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "account_info",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var ak = pm.environment.get(\"accessKey\");",
									"var sk = pm.environment.get(\"secretKey\");",
									"var host = pm.environment.get(\"hostName\");",
									"",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"console.log(timestamp)",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var path = \"/\" + pm.request.url.path.join(\"/\");",
									"",
									"var signstr = \"AccessKeyId=\"+ak+\"&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=\"+encodeURIComponent(timestamp);",
									"    ",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host+\"\\n\"+",
									"            path+\"\\n\"+",
									"            signstr",
									"console.log(payload);",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, sk);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"console.log(signature);",
									"",
									"var URLSIGN = signstr+\"&Signature=\"+encodeURIComponent(signature)",
									"",
									"pm.environment.set(\"URLSIGN\",URLSIGN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"margin_account\": \"USDT\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostName}}/linear-swap-api/v1/swap_cross_account_info?{{URLSIGN}}",
							"host": [
								"{{hostName}}/linear-swap-api/v1"
							],
							"path": [
								"swap_cross_account_info"
							],
							"query": [
								{
									"key": "{{URLSIGN}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "position_info",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var ak = pm.environment.get(\"accessKey\");",
									"var sk = pm.environment.get(\"secretKey\");",
									"var host = pm.environment.get(\"hostName\");",
									"",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"console.log(timestamp)",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var path = \"/\" + pm.request.url.path.join(\"/\");",
									"",
									"var signstr = \"AccessKeyId=\"+ak+\"&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=\"+encodeURIComponent(timestamp);",
									"    ",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host+\"\\n\"+",
									"            path+\"\\n\"+",
									"            signstr",
									"console.log(payload);",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, sk);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"console.log(signature);",
									"",
									"var URLSIGN = signstr+\"&Signature=\"+encodeURIComponent(signature)",
									"",
									"pm.environment.set(\"URLSIGN\",URLSIGN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostName}}/linear-swap-api/v1/swap_cross_position_info?{{URLSIGN}}",
							"host": [
								"{{hostName}}/linear-swap-api/v1"
							],
							"path": [
								"swap_cross_position_info"
							],
							"query": [
								{
									"key": "{{URLSIGN}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "sub_account_list",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var ak = pm.environment.get(\"accessKey\");",
									"var sk = pm.environment.get(\"secretKey\");",
									"var host = pm.environment.get(\"hostName\");",
									"",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"console.log(timestamp)",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var path = \"/\" + pm.request.url.path.join(\"/\");",
									"",
									"var signstr = \"AccessKeyId=\"+ak+\"&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=\"+encodeURIComponent(timestamp);",
									"    ",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host+\"\\n\"+",
									"            path+\"\\n\"+",
									"            signstr",
									"console.log(payload);",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, sk);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"console.log(signature);",
									"",
									"var URLSIGN = signstr+\"&Signature=\"+encodeURIComponent(signature)",
									"",
									"pm.environment.set(\"URLSIGN\",URLSIGN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"margin_account\":\"USDT\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostName}}/linear-swap-api/v1/swap_cross_sub_account_list?{{URLSIGN}}",
							"host": [
								"{{hostName}}/linear-swap-api/v1"
							],
							"path": [
								"swap_cross_sub_account_list"
							],
							"query": [
								{
									"key": "{{URLSIGN}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "swap_cross_sub_account_info_list",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c97d2ced-df54-456c-bf17-3db1e7159427",
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contract_code\": \"btc-usdt\"\n}"
						},
						"url": {
							"raw": "https://{{hostName}}/linear-swap-api/v1/swap_cross_sub_account_info_list?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"linear-swap-api",
								"v1",
								"swap_cross_sub_account_info_list"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "sub_account_info",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var ak = pm.environment.get(\"accessKey\");",
									"var sk = pm.environment.get(\"secretKey\");",
									"var host = pm.environment.get(\"hostName\");",
									"",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"console.log(timestamp)",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var path = \"/\" + pm.request.url.path.join(\"/\");",
									"",
									"var signstr = \"AccessKeyId=\"+ak+\"&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=\"+encodeURIComponent(timestamp);",
									"    ",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host+\"\\n\"+",
									"            path+\"\\n\"+",
									"            signstr",
									"console.log(payload);",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, sk);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"console.log(signature);",
									"",
									"var URLSIGN = signstr+\"&Signature=\"+encodeURIComponent(signature)",
									"",
									"pm.environment.set(\"URLSIGN\",URLSIGN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"sub_uid\": 114400601,\n    \"margin_account\": \"USDT\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostName}}/linear-swap-api/v1/swap_cross_sub_account_info?{{URLSIGN}}",
							"host": [
								"{{hostName}}/linear-swap-api/v1"
							],
							"path": [
								"swap_cross_sub_account_info"
							],
							"query": [
								{
									"key": "{{URLSIGN}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "sub_position_info",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var ak = pm.environment.get(\"accessKey\");",
									"var sk = pm.environment.get(\"secretKey\");",
									"var host = pm.environment.get(\"hostName\");",
									"",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"console.log(timestamp)",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var path = \"/\" + pm.request.url.path.join(\"/\");",
									"",
									"var signstr = \"AccessKeyId=\"+ak+\"&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=\"+encodeURIComponent(timestamp);",
									"    ",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host+\"\\n\"+",
									"            path+\"\\n\"+",
									"            signstr",
									"console.log(payload);",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, sk);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"console.log(signature);",
									"",
									"var URLSIGN = signstr+\"&Signature=\"+encodeURIComponent(signature)",
									"",
									"pm.environment.set(\"URLSIGN\",URLSIGN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"sub_uid\": 114400601,\n    \"contract_code\": \"BTC-USDT\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostName}}/linear-swap-api/v1/swap_cross_sub_position_info?{{URLSIGN}}",
							"host": [
								"{{hostName}}/linear-swap-api/v1"
							],
							"path": [
								"swap_cross_sub_position_info"
							],
							"query": [
								{
									"key": "{{URLSIGN}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "transfer_limit",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var ak = pm.environment.get(\"accessKey\");",
									"var sk = pm.environment.get(\"secretKey\");",
									"var host = pm.environment.get(\"hostName\");",
									"",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"console.log(timestamp)",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var path = \"/\" + pm.request.url.path.join(\"/\");",
									"",
									"var signstr = \"AccessKeyId=\"+ak+\"&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=\"+encodeURIComponent(timestamp);",
									"    ",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host+\"\\n\"+",
									"            path+\"\\n\"+",
									"            signstr",
									"console.log(payload);",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, sk);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"console.log(signature);",
									"",
									"var URLSIGN = signstr+\"&Signature=\"+encodeURIComponent(signature)",
									"",
									"pm.environment.set(\"URLSIGN\",URLSIGN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"margin_account\": \"USDT\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostName}}/linear-swap-api/v1/swap_cross_transfer_limit?{{URLSIGN}}",
							"host": [
								"{{hostName}}/linear-swap-api/v1"
							],
							"path": [
								"swap_cross_transfer_limit"
							],
							"query": [
								{
									"key": "{{URLSIGN}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "position_limit",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var ak = pm.environment.get(\"accessKey\");",
									"var sk = pm.environment.get(\"secretKey\");",
									"var host = pm.environment.get(\"hostName\");",
									"",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"console.log(timestamp)",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var path = \"/\" + pm.request.url.path.join(\"/\");",
									"",
									"var signstr = \"AccessKeyId=\"+ak+\"&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=\"+encodeURIComponent(timestamp);",
									"    ",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host+\"\\n\"+",
									"            path+\"\\n\"+",
									"            signstr",
									"console.log(payload);",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, sk);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"console.log(signature);",
									"",
									"var URLSIGN = signstr+\"&Signature=\"+encodeURIComponent(signature)",
									"",
									"pm.environment.set(\"URLSIGN\",URLSIGN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contract_code\": \"BTC-USDT\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostName}}/linear-swap-api/v1/swap_cross_position_limit?{{URLSIGN}}",
							"host": [
								"{{hostName}}/linear-swap-api/v1"
							],
							"path": [
								"swap_cross_position_limit"
							],
							"query": [
								{
									"key": "{{URLSIGN}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "account_position_info",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var ak = pm.environment.get(\"accessKey\");",
									"var sk = pm.environment.get(\"secretKey\");",
									"var host = pm.environment.get(\"hostName\");",
									"",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"console.log(timestamp)",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var path = \"/\" + pm.request.url.path.join(\"/\");",
									"",
									"var signstr = \"AccessKeyId=\"+ak+\"&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=\"+encodeURIComponent(timestamp);",
									"    ",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host+\"\\n\"+",
									"            path+\"\\n\"+",
									"            signstr",
									"console.log(payload);",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, sk);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"console.log(signature);",
									"",
									"var URLSIGN = signstr+\"&Signature=\"+encodeURIComponent(signature)",
									"",
									"pm.environment.set(\"URLSIGN\",URLSIGN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"margin_account\": \"USDT\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostName}}/linear-swap-api/v1/swap_cross_account_position_info?{{URLSIGN}}",
							"host": [
								"{{hostName}}/linear-swap-api/v1"
							],
							"path": [
								"swap_cross_account_position_info"
							],
							"query": [
								{
									"key": "{{URLSIGN}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "available_level_rate",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var ak = pm.environment.get(\"accessKey\");",
									"var sk = pm.environment.get(\"secretKey\");",
									"var host = pm.environment.get(\"hostName\");",
									"",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"console.log(timestamp)",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var path = \"/\" + pm.request.url.path.join(\"/\");",
									"",
									"var signstr = \"AccessKeyId=\"+ak+\"&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=\"+encodeURIComponent(timestamp);",
									"    ",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host+\"\\n\"+",
									"            path+\"\\n\"+",
									"            signstr",
									"console.log(payload);",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, sk);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"console.log(signature);",
									"",
									"var URLSIGN = signstr+\"&Signature=\"+encodeURIComponent(signature)",
									"",
									"pm.environment.set(\"URLSIGN\",URLSIGN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contract_code\": \"BTC-USDT\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostName}}/linear-swap-api/v1/swap_cross_available_level_rate?{{URLSIGN}}",
							"host": [
								"{{hostName}}/linear-swap-api/v1"
							],
							"path": [
								"swap_cross_available_level_rate"
							],
							"query": [
								{
									"key": "{{URLSIGN}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "swap_cross_user_settlement_records",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "37c0b91f-9040-4168-b158-38d796cb4e10",
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"margin_account\": \"usdt\"\n}"
						},
						"url": {
							"raw": "{{hostName}}/linear-swap-api/v1/swap_cross_user_settlement_records?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"linear-swap-api",
								"v1",
								"swap_cross_user_settlement_records"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var ak = pm.environment.get(\"accessKey\");",
									"var sk = pm.environment.get(\"secretKey\");",
									"var host = pm.environment.get(\"hostName\");",
									"",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"console.log(timestamp)",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var path = \"/\" + pm.request.url.path.join(\"/\");",
									"",
									"var signstr = \"AccessKeyId=\"+ak+\"&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=\"+encodeURIComponent(timestamp);",
									"    ",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host+\"\\n\"+",
									"            path+\"\\n\"+",
									"            signstr",
									"console.log(payload);",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, sk);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"console.log(signature);",
									"",
									"var URLSIGN = signstr+\"&Signature=\"+encodeURIComponent(signature)",
									"",
									"pm.environment.set(\"URLSIGN\",URLSIGN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contract_code\": \"BTC-USDT\",\n    \"volume\":1,\n    \"direction\":\"buy\",\n    \"offset\":\"open\",\n    \"lever_rate\":5,\n    \"order_price_type\":\"limit\",\n    \"price\": 35000,\n    \"client_order_id\":6\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostName}}/linear-swap-api/v1/swap_cross_order?{{URLSIGN}}",
							"host": [
								"{{hostName}}/linear-swap-api/v1"
							],
							"path": [
								"swap_cross_order"
							],
							"query": [
								{
									"key": "{{URLSIGN}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "batchorder",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var ak = pm.environment.get(\"accessKey\");",
									"var sk = pm.environment.get(\"secretKey\");",
									"var host = pm.environment.get(\"hostName\");",
									"",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"console.log(timestamp)",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var path = \"/\" + pm.request.url.path.join(\"/\");",
									"",
									"var signstr = \"AccessKeyId=\"+ak+\"&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=\"+encodeURIComponent(timestamp);",
									"    ",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host+\"\\n\"+",
									"            path+\"\\n\"+",
									"            signstr",
									"console.log(payload);",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, sk);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"console.log(signature);",
									"",
									"var URLSIGN = signstr+\"&Signature=\"+encodeURIComponent(signature)",
									"",
									"pm.environment.set(\"URLSIGN\",URLSIGN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"orders_data\": [\n        {\n            \"contract_code\": \"BTC-USDT\",\n            \"volume\": 1,\n            \"direction\": \"buy\",\n            \"offset\": \"open\",\n            \"lever_rate\": 5,\n            \"order_price_type\": \"limit\",\n            \"price\": 20000,\n            \"client_order_id\": 2\n        },\n        {\n            \"contract_code\": \"BTC-USDT\",\n            \"volume\": 1,\n            \"direction\": \"sell\",\n            \"offset\": \"open\",\n            \"lever_rate\": 5,\n            \"order_price_type\": \"limit\",\n            \"price\": 20000,\n            \"client_order_id\": 3\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostName}}/linear-swap-api/v1/swap_cross_batchorder?{{URLSIGN}}",
							"host": [
								"{{hostName}}/linear-swap-api/v1"
							],
							"path": [
								"swap_cross_batchorder"
							],
							"query": [
								{
									"key": "{{URLSIGN}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "cancel",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var ak = pm.environment.get(\"accessKey\");",
									"var sk = pm.environment.get(\"secretKey\");",
									"var host = pm.environment.get(\"hostName\");",
									"",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"console.log(timestamp)",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var path = \"/\" + pm.request.url.path.join(\"/\");",
									"",
									"var signstr = \"AccessKeyId=\"+ak+\"&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=\"+encodeURIComponent(timestamp);",
									"    ",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host+\"\\n\"+",
									"            path+\"\\n\"+",
									"            signstr",
									"console.log(payload);",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, sk);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"console.log(signature);",
									"",
									"var URLSIGN = signstr+\"&Signature=\"+encodeURIComponent(signature)",
									"",
									"pm.environment.set(\"URLSIGN\",URLSIGN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contract_code\": \"BTC-USDT\",\n    \"client_order_id\": \"1,2,3\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostName}}/linear-swap-api/v1/swap_cross_cancel?{{URLSIGN}}",
							"host": [
								"{{hostName}}/linear-swap-api/v1"
							],
							"path": [
								"swap_cross_cancel"
							],
							"query": [
								{
									"key": "{{URLSIGN}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "cancelall",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var ak = pm.environment.get(\"accessKey\");",
									"var sk = pm.environment.get(\"secretKey\");",
									"var host = pm.environment.get(\"hostName\");",
									"",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"console.log(timestamp)",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var path = \"/\" + pm.request.url.path.join(\"/\");",
									"",
									"var signstr = \"AccessKeyId=\"+ak+\"&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=\"+encodeURIComponent(timestamp);",
									"    ",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host+\"\\n\"+",
									"            path+\"\\n\"+",
									"            signstr",
									"console.log(payload);",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, sk);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"console.log(signature);",
									"",
									"var URLSIGN = signstr+\"&Signature=\"+encodeURIComponent(signature)",
									"",
									"pm.environment.set(\"URLSIGN\",URLSIGN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contract_code\": \"EOS-USDT\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostName}}/linear-swap-api/v1/swap_cross_cancelall?{{URLSIGN}}",
							"host": [
								"{{hostName}}/linear-swap-api/v1"
							],
							"path": [
								"swap_cross_cancelall"
							],
							"query": [
								{
									"key": "{{URLSIGN}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "order_info",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var ak = pm.environment.get(\"accessKey\");",
									"var sk = pm.environment.get(\"secretKey\");",
									"var host = pm.environment.get(\"hostName\");",
									"",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"console.log(timestamp)",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var path = \"/\" + pm.request.url.path.join(\"/\");",
									"",
									"var signstr = \"AccessKeyId=\"+ak+\"&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=\"+encodeURIComponent(timestamp);",
									"    ",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host+\"\\n\"+",
									"            path+\"\\n\"+",
									"            signstr",
									"console.log(payload);",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, sk);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"console.log(signature);",
									"",
									"var URLSIGN = signstr+\"&Signature=\"+encodeURIComponent(signature)",
									"",
									"pm.environment.set(\"URLSIGN\",URLSIGN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contract_code\": \"BTC-USDT\",\n    \"client_order_id\": \"1,2,3\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostName}}/linear-swap-api/v1/swap_cross_order_info?{{URLSIGN}}",
							"host": [
								"{{hostName}}/linear-swap-api/v1"
							],
							"path": [
								"swap_cross_order_info"
							],
							"query": [
								{
									"key": "{{URLSIGN}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "order_detail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var ak = pm.environment.get(\"accessKey\");",
									"var sk = pm.environment.get(\"secretKey\");",
									"var host = pm.environment.get(\"hostName\");",
									"",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"console.log(timestamp)",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var path = \"/\" + pm.request.url.path.join(\"/\");",
									"",
									"var signstr = \"AccessKeyId=\"+ak+\"&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=\"+encodeURIComponent(timestamp);",
									"    ",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host+\"\\n\"+",
									"            path+\"\\n\"+",
									"            signstr",
									"console.log(payload);",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, sk);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"console.log(signature);",
									"",
									"var URLSIGN = signstr+\"&Signature=\"+encodeURIComponent(signature)",
									"",
									"pm.environment.set(\"URLSIGN\",URLSIGN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contract_code\": \"BTC-USDT\",\n    \"order_id\": \"782999902278791168\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostName}}/linear-swap-api/v1/swap_cross_order_detail?{{URLSIGN}}",
							"host": [
								"{{hostName}}/linear-swap-api/v1"
							],
							"path": [
								"swap_cross_order_detail"
							],
							"query": [
								{
									"key": "{{URLSIGN}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "switch_lever_rate",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var ak = pm.environment.get(\"accessKey\");",
									"var sk = pm.environment.get(\"secretKey\");",
									"var host = pm.environment.get(\"hostName\");",
									"",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"console.log(timestamp)",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var path = \"/\" + pm.request.url.path.join(\"/\");",
									"",
									"var signstr = \"AccessKeyId=\"+ak+\"&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=\"+encodeURIComponent(timestamp);",
									"    ",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host+\"\\n\"+",
									"            path+\"\\n\"+",
									"            signstr",
									"console.log(payload);",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, sk);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"console.log(signature);",
									"",
									"var URLSIGN = signstr+\"&Signature=\"+encodeURIComponent(signature)",
									"",
									"pm.environment.set(\"URLSIGN\",URLSIGN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contract_code\": \"BTC-USDT\",\n    \"lever_rate\": 5\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostName}}/linear-swap-api/v1/swap_cross_switch_lever_rate?{{URLSIGN}}",
							"host": [
								"{{hostName}}/linear-swap-api/v1"
							],
							"path": [
								"swap_cross_switch_lever_rate"
							],
							"query": [
								{
									"key": "{{URLSIGN}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "openorders",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var ak = pm.environment.get(\"accessKey\");",
									"var sk = pm.environment.get(\"secretKey\");",
									"var host = pm.environment.get(\"hostName\");",
									"",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"console.log(timestamp)",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var path = \"/\" + pm.request.url.path.join(\"/\");",
									"",
									"var signstr = \"AccessKeyId=\"+ak+\"&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=\"+encodeURIComponent(timestamp);",
									"    ",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host+\"\\n\"+",
									"            path+\"\\n\"+",
									"            signstr",
									"console.log(payload);",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, sk);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"console.log(signature);",
									"",
									"var URLSIGN = signstr+\"&Signature=\"+encodeURIComponent(signature)",
									"",
									"pm.environment.set(\"URLSIGN\",URLSIGN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contract_code\": \"BTC-USDT\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostName}}/linear-swap-api/v1/swap_cross_openorders?{{URLSIGN}}",
							"host": [
								"{{hostName}}/linear-swap-api/v1"
							],
							"path": [
								"swap_cross_openorders"
							],
							"query": [
								{
									"key": "{{URLSIGN}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "hisorders",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var ak = pm.environment.get(\"accessKey\");",
									"var sk = pm.environment.get(\"secretKey\");",
									"var host = pm.environment.get(\"hostName\");",
									"",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"console.log(timestamp)",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var path = \"/\" + pm.request.url.path.join(\"/\");",
									"",
									"var signstr = \"AccessKeyId=\"+ak+\"&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=\"+encodeURIComponent(timestamp);",
									"    ",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host+\"\\n\"+",
									"            path+\"\\n\"+",
									"            signstr",
									"console.log(payload);",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, sk);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"console.log(signature);",
									"",
									"var URLSIGN = signstr+\"&Signature=\"+encodeURIComponent(signature)",
									"",
									"pm.environment.set(\"URLSIGN\",URLSIGN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contract_code\": \"BTC-USDT\",\n    \"trade_type\": 0,\n    \"type\": 1,\n    \"status\": 0,\n    \"create_date\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostName}}/linear-swap-api/v1/swap_cross_hisorders?{{URLSIGN}}",
							"host": [
								"{{hostName}}/linear-swap-api/v1"
							],
							"path": [
								"swap_cross_hisorders"
							],
							"query": [
								{
									"key": "{{URLSIGN}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "swap_cross_hisorders_exact",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c97d2ced-df54-456c-bf17-3db1e7159427",
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contract_code\": \"btc-usdt\",\n    \"trade_type\": \"0\",\n    \"status\": 0,\n    \"type\":1\n}"
						},
						"url": {
							"raw": "{{hostName}}/linear-swap-api/v1/swap_cross_hisorders_exact?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"linear-swap-api",
								"v1",
								"swap_cross_hisorders_exact"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "matchresults",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var ak = pm.environment.get(\"accessKey\");",
									"var sk = pm.environment.get(\"secretKey\");",
									"var host = pm.environment.get(\"hostName\");",
									"",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"console.log(timestamp)",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var path = \"/\" + pm.request.url.path.join(\"/\");",
									"",
									"var signstr = \"AccessKeyId=\"+ak+\"&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=\"+encodeURIComponent(timestamp);",
									"    ",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host+\"\\n\"+",
									"            path+\"\\n\"+",
									"            signstr",
									"console.log(payload);",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, sk);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"console.log(signature);",
									"",
									"var URLSIGN = signstr+\"&Signature=\"+encodeURIComponent(signature)",
									"",
									"pm.environment.set(\"URLSIGN\",URLSIGN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contract_code\": \"BTC-USDT\",\n    \"trade_type\": 0,\n    \"type\": 1,\n    \"status\": 0,\n    \"create_date\":1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostName}}/linear-swap-api/v1/swap_cross_matchresults?{{URLSIGN}}",
							"host": [
								"{{hostName}}/linear-swap-api/v1"
							],
							"path": [
								"swap_cross_matchresults"
							],
							"query": [
								{
									"key": "{{URLSIGN}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "swap_cross_matchresults_exact",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c97d2ced-df54-456c-bf17-3db1e7159427",
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contract_code\": \"btc-usdt\",\n    \"trade_type\": \"0\",\n    \"status\": 0,\n    \"type\":1\n}"
						},
						"url": {
							"raw": "{{hostName}}/linear-swap-api/v1/swap_cross_matchresults_exact?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"linear-swap-api",
								"v1",
								"swap_cross_matchresults_exact"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "lightning_close_position",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var ak = pm.environment.get(\"accessKey\");",
									"var sk = pm.environment.get(\"secretKey\");",
									"var host = pm.environment.get(\"hostName\");",
									"",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"console.log(timestamp)",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var path = \"/\" + pm.request.url.path.join(\"/\");",
									"",
									"var signstr = \"AccessKeyId=\"+ak+\"&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=\"+encodeURIComponent(timestamp);",
									"    ",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host+\"\\n\"+",
									"            path+\"\\n\"+",
									"            signstr",
									"console.log(payload);",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, sk);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"console.log(signature);",
									"",
									"var URLSIGN = signstr+\"&Signature=\"+encodeURIComponent(signature)",
									"",
									"pm.environment.set(\"URLSIGN\",URLSIGN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contract_code\": \"BTC-USDT\",\n    \"volume\": 1,\n    \"direction\": \"buy\",\n    \"order_price_type\": \"lightning\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostName}}/linear-swap-api/v1/swap_cross_lightning_close_position?{{URLSIGN}}",
							"host": [
								"{{hostName}}/linear-swap-api/v1"
							],
							"path": [
								"swap_cross_lightning_close_position"
							],
							"query": [
								{
									"key": "{{URLSIGN}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "trigger_order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var ak = pm.environment.get(\"accessKey\");",
									"var sk = pm.environment.get(\"secretKey\");",
									"var host = pm.environment.get(\"hostName\");",
									"",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"console.log(timestamp)",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var path = \"/\" + pm.request.url.path.join(\"/\");",
									"",
									"var signstr = \"AccessKeyId=\"+ak+\"&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=\"+encodeURIComponent(timestamp);",
									"    ",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host+\"\\n\"+",
									"            path+\"\\n\"+",
									"            signstr",
									"console.log(payload);",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, sk);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"console.log(signature);",
									"",
									"var URLSIGN = signstr+\"&Signature=\"+encodeURIComponent(signature)",
									"",
									"pm.environment.set(\"URLSIGN\",URLSIGN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contract_code\": \"BTC-USDT\",\n    \"trigger_type\": \"ge\",\n    \"trigger_price\": 40000,\n    \"order_price\": 40000,\n    \"order_price_type\": \"limit\",\n    \"volume\": 4,\n    \"direction\": \"sell\",\n    \"offset\": \"open\",\n    \"lever_rate\": 5\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostName}}/linear-swap-api/v1/swap_cross_trigger_order?{{URLSIGN}}",
							"host": [
								"{{hostName}}/linear-swap-api/v1"
							],
							"path": [
								"swap_cross_trigger_order"
							],
							"query": [
								{
									"key": "{{URLSIGN}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "trigger_cancel",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var ak = pm.environment.get(\"accessKey\");",
									"var sk = pm.environment.get(\"secretKey\");",
									"var host = pm.environment.get(\"hostName\");",
									"",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"console.log(timestamp)",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var path = \"/\" + pm.request.url.path.join(\"/\");",
									"",
									"var signstr = \"AccessKeyId=\"+ak+\"&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=\"+encodeURIComponent(timestamp);",
									"    ",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host+\"\\n\"+",
									"            path+\"\\n\"+",
									"            signstr",
									"console.log(payload);",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, sk);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"console.log(signature);",
									"",
									"var URLSIGN = signstr+\"&Signature=\"+encodeURIComponent(signature)",
									"",
									"pm.environment.set(\"URLSIGN\",URLSIGN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contract_code\": \"BTC-USDT\",\n    \"order_id\": \"1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostName}}/linear-swap-api/v1/swap_cross_trigger_cancel?{{URLSIGN}}",
							"host": [
								"{{hostName}}/linear-swap-api/v1"
							],
							"path": [
								"swap_cross_trigger_cancel"
							],
							"query": [
								{
									"key": "{{URLSIGN}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "trigger_cancelall",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var ak = pm.environment.get(\"accessKey\");",
									"var sk = pm.environment.get(\"secretKey\");",
									"var host = pm.environment.get(\"hostName\");",
									"",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"console.log(timestamp)",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var path = \"/\" + pm.request.url.path.join(\"/\");",
									"",
									"var signstr = \"AccessKeyId=\"+ak+\"&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=\"+encodeURIComponent(timestamp);",
									"    ",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host+\"\\n\"+",
									"            path+\"\\n\"+",
									"            signstr",
									"console.log(payload);",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, sk);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"console.log(signature);",
									"",
									"var URLSIGN = signstr+\"&Signature=\"+encodeURIComponent(signature)",
									"",
									"pm.environment.set(\"URLSIGN\",URLSIGN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contract_code\": \"BTC-USDT\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostName}}/linear-swap-api/v1/swap_cross_trigger_cancelall?{{URLSIGN}}",
							"host": [
								"{{hostName}}/linear-swap-api/v1"
							],
							"path": [
								"swap_cross_trigger_cancelall"
							],
							"query": [
								{
									"key": "{{URLSIGN}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "trigger_openorders",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var ak = pm.environment.get(\"accessKey\");",
									"var sk = pm.environment.get(\"secretKey\");",
									"var host = pm.environment.get(\"hostName\");",
									"",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"console.log(timestamp)",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var path = \"/\" + pm.request.url.path.join(\"/\");",
									"",
									"var signstr = \"AccessKeyId=\"+ak+\"&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=\"+encodeURIComponent(timestamp);",
									"    ",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host+\"\\n\"+",
									"            path+\"\\n\"+",
									"            signstr",
									"console.log(payload);",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, sk);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"console.log(signature);",
									"",
									"var URLSIGN = signstr+\"&Signature=\"+encodeURIComponent(signature)",
									"",
									"pm.environment.set(\"URLSIGN\",URLSIGN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contract_code\": \"BTC-USDT\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostName}}/linear-swap-api/v1/swap_cross_trigger_openorders?{{URLSIGN}}",
							"host": [
								"{{hostName}}/linear-swap-api/v1"
							],
							"path": [
								"swap_cross_trigger_openorders"
							],
							"query": [
								{
									"key": "{{URLSIGN}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "trigger_hisorders",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var ak = pm.environment.get(\"accessKey\");",
									"var sk = pm.environment.get(\"secretKey\");",
									"var host = pm.environment.get(\"hostName\");",
									"",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"console.log(timestamp)",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var path = \"/\" + pm.request.url.path.join(\"/\");",
									"",
									"var signstr = \"AccessKeyId=\"+ak+\"&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=\"+encodeURIComponent(timestamp);",
									"    ",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host+\"\\n\"+",
									"            path+\"\\n\"+",
									"            signstr",
									"console.log(payload);",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, sk);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"console.log(signature);",
									"",
									"var URLSIGN = signstr+\"&Signature=\"+encodeURIComponent(signature)",
									"",
									"pm.environment.set(\"URLSIGN\",URLSIGN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contract_code\": \"BTC-USDT\",\n    \"trade_type\":0,\n    \"status\":0,\n    \"create_date\":1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostName}}/linear-swap-api/v1/swap_cross_trigger_hisorders?{{URLSIGN}}",
							"host": [
								"{{hostName}}/linear-swap-api/v1"
							],
							"path": [
								"swap_cross_trigger_hisorders"
							],
							"query": [
								{
									"key": "{{URLSIGN}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "swap_cross_tpsl_order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "537eecab-433f-4afc-b28c-6fe318856e64",
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contract_code\": \"btc-usdt\",\n    \"direction\": \"sell\",\n    \"volume\": 1,\n    \"tp_trigger_price\": 35000,\n    \"tp_order_price\": 35000,\n    \"tp_order_price_type\": \"optimal_5\",\n    \"sl_trigger_price\": \"27000\",\n    \"sl_order_price\": \"27000\",\n    \"sl_order_price_type\": \"optimal_5\"\n}"
						},
						"url": {
							"raw": "{{hostName}}/linear-swap-api/v1/swap_cross_tpsl_order?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"linear-swap-api",
								"v1",
								"swap_cross_tpsl_order"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "swap_cross_tpsl_cancel",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c79ab526-5d37-43d9-a8eb-6a50a3b2eac7",
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contract_code\": \"btc-usdt\",\n    \"order_id\": \"796414099619041280,795714078698749956\"\n}"
						},
						"url": {
							"raw": "{{hostName}}/linear-swap-api/v1/swap_cross_tpsl_cancel?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"linear-swap-api",
								"v1",
								"swap_cross_tpsl_cancel"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "swap_cross_tpsl_cancelall",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b5e546c6-7649-4c8b-bbc8-3f4549566394",
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contract_code\": \"btc-usdt\"\n}"
						},
						"url": {
							"raw": "{{hostName}}/linear-swap-api/v1/swap_cross_tpsl_cancelall?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"linear-swap-api",
								"v1",
								"swap_cross_tpsl_cancelall"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "swap_cross_tpsl_openorders",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "962aea12-ce7b-449a-a7b5-4fc049c53626",
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contract_code\": \"btc-usdt\",\"page_size\":1\n}"
						},
						"url": {
							"raw": "{{hostName}}/linear-swap-api/v1/swap_cross_tpsl_openorders?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"linear-swap-api",
								"v1",
								"swap_cross_tpsl_openorders"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "swap_cross_tpsl_hisorders",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0e8df7e3-277a-42da-aea0-a2194c61c725",
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contract_code\": \"btc-usdt\",\n    \"status\": 0,\n    \"create_date\": 10,\n    \"sort_by\": \"created_at\",\"page_size\":1\n}"
						},
						"url": {
							"raw": "{{hostName}}/linear-swap-api/v1/swap_cross_tpsl_hisorders?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"linear-swap-api",
								"v1",
								"swap_cross_tpsl_hisorders"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "swap_cross_relation_tpsl_order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "37c0b91f-9040-4168-b158-38d796cb4e10",
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contract_code\": \"btc-usdt\",\n    \"order_id\": 795947312485351424\n}"
						},
						"url": {
							"raw": "{{hostName}}/linear-swap-api/v1/swap_cross_relation_tpsl_order?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"linear-swap-api",
								"v1",
								"swap_cross_relation_tpsl_order"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "swap_cross_track_order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contract_code\": \"btc-usdt\",\n    \"direction\": \"sell\",\n    \"offset\": \"open\",\n    \"lever_rate\": 5,\n    \"volume\": 1,\n    \"callback_rate\": 0.03,\n    \"active_price\": 51111,\n    \"order_price_type\": \"formula_price\"\n}"
						},
						"url": {
							"raw": "{{hostName}}/linear-swap-api/v1/swap_cross_track_order?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"linear-swap-api",
								"v1",
								"swap_cross_track_order"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "swap_cross_track_cancel",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contract_code\": \"btc-usdt\",\"order_id\":\"826053970168446976,826052906719444993\"\n}"
						},
						"url": {
							"raw": "{{hostName}}/linear-swap-api/v1/swap_cross_track_cancel?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"linear-swap-api",
								"v1",
								"swap_cross_track_cancel"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "swap_cross_track_cancelall",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contract_code\": \"btc-usdt\"\n}"
						},
						"url": {
							"raw": "{{hostName}}/linear-swap-api/v1/swap_cross_track_cancelall?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"linear-swap-api",
								"v1",
								"swap_cross_track_cancelall"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "swap_cross_track_openorders",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contract_code\": \"btc-usdt\"\n}"
						},
						"url": {
							"raw": "{{hostName}}/linear-swap-api/v1/swap_cross_track_openorders?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"linear-swap-api",
								"v1",
								"swap_cross_track_openorders"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "swap_cross_track_hisorders",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"status\": \"0\",\n    \"contract_code\": \"btc-usdt\",\n    \"trade_type\": 0,\n    \"create_date\": 1\n}"
						},
						"url": {
							"raw": "{{hostName}}/linear-swap-api/v1/swap_cross_track_hisorders?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"linear-swap-api",
								"v1",
								"swap_cross_track_hisorders"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "swap_position_info",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_position_info?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_position_info"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_account_position_info",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"contract_code\": \"BTC-USDT\"}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_account_position_info?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_account_position_info"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_sub_auth",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c97d2ced-df54-456c-bf17-3db1e7159427",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"var url=pm.environment.get(\"hostName\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"if(url!=null){",
							"    var host=url;",
							"    console.log(host);",
							"}else{",
							"    var host = pm.request.url.host.join(\".\");",
							"    console.log(host);",
							"}",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"sub_uid\":\"123,1234567\",\"sub_auth\":1\n}"
				},
				"url": {
					"raw": "https://{{hostName}}/linear-swap-api/v1/swap_sub_auth?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "https",
					"host": [
						"{{hostName}}"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_sub_auth"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_sub_account_list",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"contract_code\": \"BTC-USDT\"}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_sub_account_list?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_sub_account_list"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_sub_account_info_list",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c97d2ced-df54-456c-bf17-3db1e7159427",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"var url=pm.environment.get(\"hostName\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"if(url!=null){",
							"    var host=url;",
							"    console.log(host);",
							"}else{",
							"    var host = pm.request.url.host.join(\".\");",
							"    console.log(host);",
							"}",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"contract_code\": \"btc-usdt\"\n}"
				},
				"url": {
					"raw": "https://{{hostName}}/linear-swap-api/v1/swap_sub_account_info_list?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "https",
					"host": [
						"{{hostName}}"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_sub_account_info_list"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_sub_account_info",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"contract_code\": \"BTC-USDT\",\"sub_uid\": 1}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_sub_account_info?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_sub_account_info"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_sub_position_info",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"contract_code\": \"BTC-USDT\",\"sub_uid\": 1}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_sub_position_info?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_sub_position_info"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_financial_record",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"margin_account\": \"BTC-USDT\"}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_financial_record?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_financial_record"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_financial_record_exact",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c97d2ced-df54-456c-bf17-3db1e7159427",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"var url=pm.environment.get(\"hostName\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"if(url!=null){",
							"    var host=url;",
							"    console.log(host);",
							"}else{",
							"    var host = pm.request.url.host.join(\".\");",
							"    console.log(host);",
							"}",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"margin_account\":\"usdt\"\n}"
				},
				"url": {
					"raw": "https://{{hostName}}/linear-swap-api/v1/swap_financial_record_exact?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "https",
					"host": [
						"{{hostName}}"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_financial_record_exact"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_user_settlement_records",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "37c0b91f-9040-4168-b158-38d796cb4e10",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"var url=pm.environment.get(\"hostName\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"if(url!=null){",
							"    var host=url;",
							"    console.log(host);",
							"}else{",
							"    var host = pm.request.url.host.join(\".\");",
							"    console.log(host);",
							"}",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"contract_code\": \"btc-usdt\"\n}"
				},
				"url": {
					"raw": "{{hostName}}/linear-swap-api/v1/swap_user_settlement_records?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"host": [
						"{{hostName}}"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_user_settlement_records"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_available_level_rate",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"contract_code\":\"btc-usdt\"}"
				},
				"url": {
					"raw": "http://api.hbdm.com/linear-swap-api/v1/swap_available_level_rate?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"com"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_available_level_rate"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_order_limit",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"order_price_type\": \"limit\"}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_order_limit?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_order_limit"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_fee",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_fee?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_fee"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_balance_valuation",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"var url=pm.environment.get(\"hostName\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"if(url!=null){",
							"    var host=url;",
							"    console.log(host);",
							"}else{",
							"    var host = pm.request.url.host.join(\".\");",
							"    console.log(host);",
							"}",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"valuation_asset\": \"btc\"\n}"
				},
				"url": {
					"raw": "https://{{hostName}}/linear-swap-api/v1/swap_balance_valuation?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "https",
					"host": [
						"{{hostName}}"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_balance_valuation"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_account_info",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_account_info?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_account_info"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_transfer_limit",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"contract_code\": \"BTC-USDT\"}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_transfer_limit?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_transfer_limit"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_position_limit",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_position_limit?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_position_limit"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_master_sub_transfer",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"sub_uid\": 1,\n    \"asset\": \"USDT\",\n    \"from_margin_account\": \"BTC-USDT\",\n    \"to_margin_account\": \"BTC-USDT\",\n    \"amount\": 10,\n    \"type\": \"master_to_sub\"\n}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_master_sub_transfer?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_master_sub_transfer"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_master_sub_transfer_record",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"margin_account\": \"BTC-USDT\",\n    \"transfer_type\": \"34\",\n    \"create_date\": 10\n}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_master_sub_transfer_record?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_master_sub_transfer_record"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_transfer_inner",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"from_margin_account\": \"BTC-USDT\",\n    \"to_margin_account\": \"ETH-USDT\",\n    \"amount\": 10,\n    \"asset\": \"USDT\"\n}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_transfer_inner?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_transfer_inner"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_api_trading_status",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_api_trading_status?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_api_trading_status"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_order",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"volume\": 5,\n    \"price\": 8000,\n    \"client_order_id\": 57012021022,\n    \"contract_code\": \"BTC-USDT\",\n    \"direction\": \"sell\",\n    \"offset\": \"open\",\n    \"order_price_type\": \"limit\",\n    \"lever_rate\": 1\n}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_order?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_order"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_batchorder",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"orders_data\": [\n        {\n            \"volume\": 1,\n            \"price\": 10329,\n            \"client_order_id\": 57012021024,\n            \"contract_code\": \"BTC-USDT\",\n            \"direction\": \"sell\",\n            \"offset\": \"open\",\n            \"order_price_type\": \"limit\",\n            \"lever_rate\": 1\n        }\n    ]\n}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_batchorder?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_batchorder"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_cancel",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"order_id\": \"758437106720993280\",\n\"contract_code\": \"BTC-USDT\"\n}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_cancel?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_cancel"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_cancelall",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"contract_code\": \"BTC-USDT\"}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_cancelall?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_cancelall"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_switch_lever_rate",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"contract_code\": \"btc-usdt\",\"lever_rate\":10}"
				},
				"url": {
					"raw": "http://api.hbdm.com/linear-swap-api/v1/swap_switch_lever_rate?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"com"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_switch_lever_rate"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_order_info",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"order_id\": \"758438520448905216\",\n    \"contract_code\": \"BTC-USDT\"\n}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_order_info?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_order_info"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_order_detail",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"order_id\": 758438520448905216,\n    \"contract_code\": \"BTC-USDT\",\n    \"created_at\": 1600866854727,\n    \"order_type\": 1\n}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_order_detail?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_order_detail"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_openorders",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"order_id\": 758438520448905216,\n    \"contract_code\": \"BTC-USDT\",\n    \"created_at\": 1600866854727,\n    \"order_type\": 1\n}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_openorders?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_openorders"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_hisorders",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"contract_code\": \"BTC-USDT\",\n    \"trade_type\": 0,\n    \"type\": 1,\n    \"status\": 0,\n    \"create_date\": 1,\n    \"page_index\": 1,\n    \"page_size\": 2\n}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_hisorders?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_hisorders"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_hisorders_exact",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c97d2ced-df54-456c-bf17-3db1e7159427",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"var url=pm.environment.get(\"hostName\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"if(url!=null){",
							"    var host=url;",
							"    console.log(host);",
							"}else{",
							"    var host = pm.request.url.host.join(\".\");",
							"    console.log(host);",
							"}",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"contract_code\": \"btc-usdt\",\n    \"trade_type\": \"0\",\n    \"status\": 0,\n    \"type\":1\n}"
				},
				"url": {
					"raw": "{{hostName}}/linear-swap-api/v1/swap_hisorders_exact?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"host": [
						"{{hostName}}"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_hisorders_exact"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_matchresults",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"contract_code\": \"BTC-USDT\",\n    \"trade_type\": 0,\n    \"create_date\": 1,\n    \"page_index\": 1,\n    \"page_size\": 2\n}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_matchresults?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_matchresults"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_matchresults_exact",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c97d2ced-df54-456c-bf17-3db1e7159427",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"var url=pm.environment.get(\"hostName\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"if(url!=null){",
							"    var host=url;",
							"    console.log(host);",
							"}else{",
							"    var host = pm.request.url.host.join(\".\");",
							"    console.log(host);",
							"}",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"contract_code\": \"btc-usdt\",\n    \"trade_type\": \"0\",\n    \"status\": 0,\n    \"type\":1\n}"
				},
				"url": {
					"raw": "{{hostName}}/linear-swap-api/v1/swap_matchresults_exact?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"host": [
						"{{hostName}}"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_matchresults_exact"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_lightning_close_position",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"contract_code\": \"BTC-USDT\",\n    \"volume\": 1,\n    \"direction\": \"buy\",\n    \"client_order_id\": 11\n}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_lightning_close_position?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_lightning_close_position"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_trigger_order",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"contract_code\": \"BTC-USDT\",\n    \"trigger_type\": \"ge\",\n    \"trigger_price\": 10387,\n    \"order_price\": 10367,\n    \"order_price_type\": \"limit\",\n    \"volume\": 1,\n    \"direction\": \"buy\",\n    \"offset\": \"open\",\n    \"lever_rate\": 1\n}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_trigger_order?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_trigger_order"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_trigger_cancel",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"contract_code\": \"BTC-USDT\",\n\t\"order_id\": \"34,1\"\n}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_trigger_cancel?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_trigger_cancel"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_trigger_cancelall",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"contract_code\": \"BTC-USDT\"\n}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_trigger_cancelall?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_trigger_cancelall"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_trigger_openorders",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"contract_code\": \"BTC-USDT\"\n}"
				},
				"url": {
					"raw": "http://api.hbdm.com/linear-swap-api/v1/swap_trigger_openorders?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"com"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_trigger_openorders"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_trigger_hisorders",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"contract_code\": \"BTC-USDT\",\n    \"trade_type\": 0,\n    \"status\": \"0\",\n    \"create_date\": 1\n}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_trigger_hisorders?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_trigger_hisorders"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_tpsl_order",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "9ecee2ac-d692-473d-b3c6-ff8618eea576",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"var url=pm.environment.get(\"hostName\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"if(url!=null){",
							"    var host=url;",
							"    console.log(host);",
							"}else{",
							"    var host = pm.request.url.host.join(\".\");",
							"    console.log(host);",
							"}",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"contract_code\": \"btc-usdt\",\n    \"direction\": \"sell\",\n    \"volume\": 1,\n    \"tp_trigger_price\": 32000,\n    \"tp_order_price\": 32000,\n    \"tp_order_price_type\": \"optimal_5\",\n    \"sl_trigger_price\": \"28000\",\n    \"sl_order_price\": \"28000\",\n    \"sl_order_price_type\": \"optimal_5\"\n}"
				},
				"url": {
					"raw": "{{hostName}}/linear-swap-api/v1/swap_tpsl_order?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"host": [
						"{{hostName}}"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_tpsl_order"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_tpsl_cancel",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "7bc77a7a-dfea-4425-a94a-4f3c8a6574ae",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"var url=pm.environment.get(\"hostName\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"if(url!=null){",
							"    var host=url;",
							"    console.log(host);",
							"}else{",
							"    var host = pm.request.url.host.join(\".\");",
							"    console.log(host);",
							"}",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"contract_code\": \"btc-usdt\",\n    \"order_id\": \"796408605114355712,795713650661638145\"\n}"
				},
				"url": {
					"raw": "{{hostName}}/linear-swap-api/v1/swap_tpsl_cancel?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"host": [
						"{{hostName}}"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_tpsl_cancel"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_tpsl_cancelall",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "5a5b7fd6-1ec5-4bf7-b7bc-d36a5f786dac",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"var url=pm.environment.get(\"hostName\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"if(url!=null){",
							"    var host=url;",
							"    console.log(host);",
							"}else{",
							"    var host = pm.request.url.host.join(\".\");",
							"    console.log(host);",
							"}",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"contract_code\": \"btc-usdt\"\n}"
				},
				"url": {
					"raw": "{{hostName}}/linear-swap-api/v1/swap_tpsl_cancelall?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"host": [
						"{{hostName}}"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_tpsl_cancelall"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_tpsl_openorders",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f052ea5b-e66d-4ab0-a510-14161126a2ca",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"var url=pm.environment.get(\"hostName\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"if(url!=null){",
							"    var host=url;",
							"    console.log(host);",
							"}else{",
							"    var host = pm.request.url.host.join(\".\");",
							"    console.log(host);",
							"}",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"contract_code\": \"btc-usdt\"\n}"
				},
				"url": {
					"raw": "{{hostName}}/linear-swap-api/v1/swap_tpsl_openorders?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"host": [
						"{{hostName}}"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_tpsl_openorders"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_tpsl_hisorders",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "bbd9f74a-c2bf-48bd-9f4f-61bb05049230",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"var url=pm.environment.get(\"hostName\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"if(url!=null){",
							"    var host=url;",
							"    console.log(host);",
							"}else{",
							"    var host = pm.request.url.host.join(\".\");",
							"    console.log(host);",
							"}",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"contract_code\": \"btc-usdt\",\n    \"status\": 0,\n    \"create_date\": 10,\n    \"sort_by\": \"created_at\",\n    \"page_size\": 1\n}"
				},
				"url": {
					"raw": "{{hostName}}/linear-swap-api/v1/swap_tpsl_hisorders?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"host": [
						"{{hostName}}"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_tpsl_hisorders"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_relation_tpsl_order",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "22d68e2d-87a9-4ee8-894b-d56af6175509",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"var url=pm.environment.get(\"hostName\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"if(url!=null){",
							"    var host=url;",
							"    console.log(host);",
							"}else{",
							"    var host = pm.request.url.host.join(\".\");",
							"    console.log(host);",
							"}",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"contract_code\": \"btc-usdt\",\n    \"order_id\": 795947785812557824\n}"
				},
				"url": {
					"raw": "{{hostName}}/linear-swap-api/v1/swap_relation_tpsl_order?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"host": [
						"{{hostName}}"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_relation_tpsl_order"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "transfer",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"from\": \"linear-swap\",\n    \"to\": \"spot\",\n    \"currency\": \"usdt\",\n    \"amount\": 10,\n    \"margin-account\":\"btc-usdt\"\n}"
				},
				"url": {
					"raw": "https://api.huobi.pro/v2/account/transfer?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "https",
					"host": [
						"api",
						"huobi",
						"pro"
					],
					"path": [
						"v2",
						"account",
						"transfer"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_track_order",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"var url=pm.environment.get(\"hostName\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"if(url!=null){",
							"    var host=url;",
							"    console.log(host);",
							"}else{",
							"    var host = pm.request.url.host.join(\".\");",
							"    console.log(host);",
							"}",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"contract_code\": \"btc-usdt\",\n    \"direction\": \"buy\",\n    \"offset\": \"open\",\n    \"lever_rate\": 5,\n    \"volume\": 1,\n    \"callback_rate\": 0.03,\n    \"active_price\": 48888,\n    \"order_price_type\": \"formula_price\"\n}"
				},
				"url": {
					"raw": "{{hostName}}/linear-swap-api/v1/swap_track_order?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"host": [
						"{{hostName}}"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_track_order"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_track_cancel",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"var url=pm.environment.get(\"hostName\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"if(url!=null){",
							"    var host=url;",
							"    console.log(host);",
							"}else{",
							"    var host = pm.request.url.host.join(\".\");",
							"    console.log(host);",
							"}",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"contract_code\": \"btc-usdt\",\"order_id\":\"826052268312821760,826052268312821761\"\n}"
				},
				"url": {
					"raw": "{{hostName}}/linear-swap-api/v1/swap_track_cancel?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"host": [
						"{{hostName}}"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_track_cancel"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_track_cancelall",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"var url=pm.environment.get(\"hostName\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"if(url!=null){",
							"    var host=url;",
							"    console.log(host);",
							"}else{",
							"    var host = pm.request.url.host.join(\".\");",
							"    console.log(host);",
							"}",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"contract_code\": \"btc-usdt\"\n}"
				},
				"url": {
					"raw": "{{hostName}}/linear-swap-api/v1/swap_track_cancelall?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"host": [
						"{{hostName}}"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_track_cancelall"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_track_openorders",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"var url=pm.environment.get(\"hostName\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"if(url!=null){",
							"    var host=url;",
							"    console.log(host);",
							"}else{",
							"    var host = pm.request.url.host.join(\".\");",
							"    console.log(host);",
							"}",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"contract_code\": \"btc-usdt\"\n}"
				},
				"url": {
					"raw": "{{hostName}}/linear-swap-api/v1/swap_track_openorders?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"host": [
						"{{hostName}}"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_track_openorders"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_track_hisorders",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"var url=pm.environment.get(\"hostName\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"if(url!=null){",
							"    var host=url;",
							"    console.log(host);",
							"}else{",
							"    var host = pm.request.url.host.join(\".\");",
							"    console.log(host);",
							"}",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"status\": \"0\",\n    \"contract_code\": \"btc-usdt\",\n    \"trade_type\": 0,\n    \"create_date\": 1\n}"
				},
				"url": {
					"raw": "{{hostName}}/linear-swap-api/v1/swap_track_hisorders?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"host": [
						"{{hostName}}"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_track_hisorders"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_index",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_index",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_index"
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_contract_info",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_contract_info?contract_code=BTC-USDT",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_contract_info"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_price_limit",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_price_limit?contract_code=BTC-USDT",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_price_limit"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_open_interest",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_open_interest?contract_code=BTC-USDT",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_open_interest"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "market depth",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-ex/market/depth?contract_code=BTC-USDT&type=step0",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-ex",
						"market",
						"depth"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT"
						},
						{
							"key": "type",
							"value": "step0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "klines",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-ex/market/history/kline?contract_code=BTC-USDT&period=1day&size=2",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-ex",
						"market",
						"history",
						"kline"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT"
						},
						{
							"key": "period",
							"value": "1day"
						},
						{
							"key": "size",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "market merged data",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-ex/market/detail/merged?contract_code=BTC-USDT",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-ex",
						"market",
						"detail",
						"merged"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "market trade",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-ex/market/trade?contract_code=BTC-USDT",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-ex",
						"market",
						"trade"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "market history trade",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ae2ba8b8-7d43-450d-84dd-d22908a63650",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{hostName}}/linear-swap-ex/market/history/trade?contract_code=BTC-USDT&size=10",
					"host": [
						"{{hostName}}"
					],
					"path": [
						"linear-swap-ex",
						"market",
						"history",
						"trade"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT"
						},
						{
							"key": "size",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_risk_info",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_risk_info?contract_code=BTC-USDT",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_risk_info"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_insurance_fund",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_insurance_fund?contract_code=BTC-USDT",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_insurance_fund"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_swap_adjustfactor",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_adjustfactor?contract_code=BTC-USDT",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_adjustfactor"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_his_open_interest",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_his_open_interest?contract_code=BTC-USDT&period=60min&amount_type=1",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_his_open_interest"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT"
						},
						{
							"key": "period",
							"value": "60min"
						},
						{
							"key": "amount_type",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_elite_account_ratio",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_elite_account_ratio?contract_code=BTC-USDT&period=60min&amount_type=1",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_elite_account_ratio"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT"
						},
						{
							"key": "period",
							"value": "60min"
						},
						{
							"key": "amount_type",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_elite_position_ratio",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_elite_position_ratio?contract_code=BTC-USDT&period=60min",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_elite_position_ratio"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT"
						},
						{
							"key": "period",
							"value": "60min"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_api_state",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_api_state",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_api_state"
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_funding_rate",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_funding_rate?contract_code=BTC-USDT",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_funding_rate"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_historical_funding_rate",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_historical_funding_rate?contract_code=BTC-USDT",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_historical_funding_rate"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_liquidation_orders",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_liquidation_orders?contract_code=BTC-USDT&trade_type=0&create_date=90",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_liquidation_orders"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT"
						},
						{
							"key": "trade_type",
							"value": "0"
						},
						{
							"key": "create_date",
							"value": "90"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "linear_swap_premium_index_kline",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/index/market/history/linear_swap_premium_index_kline?contract_code=BTC-USDT&period=1min&size=10",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"index",
						"market",
						"history",
						"linear_swap_premium_index_kline"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT"
						},
						{
							"key": "period",
							"value": "1min"
						},
						{
							"key": "size",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "linear_swap_estimated_rate_kline",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/index/market/history/linear_swap_estimated_rate_kline?contract_code=BTC-USDT&period=1min&size=10",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"index",
						"market",
						"history",
						"linear_swap_estimated_rate_kline"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT"
						},
						{
							"key": "period",
							"value": "1min"
						},
						{
							"key": "size",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "linear_swap_basis",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/index/market/history/linear_swap_basis?contract_code=BTC-USDT&period=1min&size=2",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"index",
						"market",
						"history",
						"linear_swap_basis"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT"
						},
						{
							"key": "period",
							"value": "1min"
						},
						{
							"key": "size",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_estimated_settlement_price",
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{hostName}}/linear-swap-api/v1/swap_estimated_settlement_price?contract_code=btc-usdt",
					"host": [
						"{{hostName}}"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_estimated_settlement_price"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "btc-usdt"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "batch_merged",
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{hostName}}/linear-swap-ex/market/detail/batch_merged",
					"host": [
						"{{hostName}}"
					],
					"path": [
						"linear-swap-ex",
						"market",
						"detail",
						"batch_merged"
					]
				}
			},
			"response": []
		},
		{
			"name": "linear_swap_mark_price_kline",
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{hostName}}/index/market/history/linear_swap_mark_price_kline?contract_code=btc-usdt&period=5min&size=5",
					"host": [
						"{{hostName}}"
					],
					"path": [
						"index",
						"market",
						"history",
						"linear_swap_mark_price_kline"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "btc-usdt"
						},
						{
							"key": "period",
							"value": "5min"
						},
						{
							"key": "size",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_ladder_margin",
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{hostName}}/linear-swap-api/v1/swap_ladder_margin?contract_code=btc-usdt&period=5min&size=5",
					"host": [
						"{{hostName}}"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_ladder_margin"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "btc-usdt"
						},
						{
							"key": "period",
							"value": "5min"
						},
						{
							"key": "size",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_batch_funding_rate",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{hostName}}/linear-swap-api/v1/swap_cross_ladder_margin?contract_code=btc-usdt",
					"host": [
						"{{hostName}}"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_cross_ladder_margin"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "btc-usdt"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "market bbo",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{hostName}}/linear-swap-ex/market/bbo",
					"host": [
						"{{hostName}}"
					],
					"path": [
						"linear-swap-ex",
						"market",
						"bbo"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "URLSIGN",
			"value": ""
		}
	]
}