{
	"info": {
		"_postman_id": "391d1397-ab7f-4b9e-91bd-0222bfda5378",
		"name": "huobi_usdt_swap_online",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "cross_margin_mode",
			"item": [
				{
					"name": "adjustfactor",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6333d2eb-67c0-4578-bfd1-429b193b0bb9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{hostName}}{{prePath}}/swap_cross_adjustfactor",
							"host": [
								"{{hostName}}{{prePath}}"
							],
							"path": [
								"swap_cross_adjustfactor"
							],
							"query": [
								{
									"key": "contract_code",
									"value": "BTC-USDT",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "transfer_state",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8e13d917-8b7b-4049-9abe-a88a427ab9a7",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{hostName}}{{prePath}}/swap_cross_transfer_state?margin_account=USDT",
							"host": [
								"{{hostName}}{{prePath}}"
							],
							"path": [
								"swap_cross_transfer_state"
							],
							"query": [
								{
									"key": "margin_account",
									"value": "USDT"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "trade_state",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7c3f912b-5a59-4638-b63e-bede5266f720",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{hostName}}{{prePath}}/swap_cross_trade_state?contract_code=BTC-USDT",
							"host": [
								"{{hostName}}{{prePath}}"
							],
							"path": [
								"swap_cross_trade_state"
							],
							"query": [
								{
									"key": "contract_code",
									"value": "BTC-USDT"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "swap_account_info",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2ffdb73f-efa6-47b8-abc1-5dc119330a3b",
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"var host = pm.request.url.host.join(\".\");",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"            ",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"    ",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_account_info?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
							"protocol": "http",
							"host": [
								"api",
								"hbdm",
								"vn"
							],
							"path": [
								"linear-swap-api",
								"v1",
								"swap_account_info"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "account_info",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "63c7d3f7-4753-48ae-b175-68cf45fd23f6",
								"exec": [
									"var ak = pm.environment.get(\"accessKey\");",
									"var sk = pm.environment.get(\"secretKey\");",
									"var host = pm.environment.get(\"hostName\");",
									"var prePath = pm.environment.get(\"prePath\");",
									"",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"console.log(timestamp)",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var path = prePath + \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var signstr = \"AccessKeyId=\"+ak+\"&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=\"+encodeURIComponent(timestamp);",
									"    ",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host+\"\\n\"+",
									"            path+\"\\n\"+",
									"            signstr",
									"console.log(payload);",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, sk);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"console.log(signature);",
									"",
									"var URLSIGN = signstr+\"&Signature=\"+encodeURIComponent(signature)",
									"",
									"pm.collectionVariables.set(\"URLSIGN\",URLSIGN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"margin_account\": \"USDT\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostName}}{{prePath}}/swap_cross_account_info?{{URLSIGN}}",
							"host": [
								"{{hostName}}{{prePath}}"
							],
							"path": [
								"swap_cross_account_info"
							],
							"query": [
								{
									"key": "{{URLSIGN}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "position_info",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1e160fd6-4797-4085-8fc7-f967352d953a",
								"exec": [
									"var ak = pm.environment.get(\"accessKey\");",
									"var sk = pm.environment.get(\"secretKey\");",
									"var host = pm.environment.get(\"hostName\");",
									"var prePath = pm.environment.get(\"prePath\");",
									"",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"console.log(timestamp)",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var path = prePath + \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var signstr = \"AccessKeyId=\"+ak+\"&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=\"+encodeURIComponent(timestamp);",
									"    ",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host+\"\\n\"+",
									"            path+\"\\n\"+",
									"            signstr",
									"console.log(payload);",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, sk);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"console.log(signature);",
									"",
									"var URLSIGN = signstr+\"&Signature=\"+encodeURIComponent(signature)",
									"",
									"pm.collectionVariables.set(\"URLSIGN\",URLSIGN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostName}}{{prePath}}/swap_cross_position_info?{{URLSIGN}}",
							"host": [
								"{{hostName}}{{prePath}}"
							],
							"path": [
								"swap_cross_position_info"
							],
							"query": [
								{
									"key": "{{URLSIGN}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "sub_account_list",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "58ab378d-e9f2-43b6-bca1-6124e7e2fbc8",
								"exec": [
									"var ak = pm.environment.get(\"accessKey\");",
									"var sk = pm.environment.get(\"secretKey\");",
									"var host = pm.environment.get(\"hostName\");",
									"var prePath = pm.environment.get(\"prePath\");",
									"",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"console.log(timestamp)",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var path = prePath + \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var signstr = \"AccessKeyId=\"+ak+\"&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=\"+encodeURIComponent(timestamp);",
									"    ",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host+\"\\n\"+",
									"            path+\"\\n\"+",
									"            signstr",
									"console.log(payload);",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, sk);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"console.log(signature);",
									"",
									"var URLSIGN = signstr+\"&Signature=\"+encodeURIComponent(signature)",
									"",
									"pm.collectionVariables.set(\"URLSIGN\",URLSIGN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"margin_account\":\"USDT\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostName}}{{prePath}}/swap_cross_sub_account_list?{{URLSIGN}}",
							"host": [
								"{{hostName}}{{prePath}}"
							],
							"path": [
								"swap_cross_sub_account_list"
							],
							"query": [
								{
									"key": "{{URLSIGN}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "sub_account_info",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cd4f7de8-0ae1-4f8b-a8f6-a3bb6d92dda8",
								"exec": [
									"var ak = pm.environment.get(\"accessKey\");",
									"var sk = pm.environment.get(\"secretKey\");",
									"var host = pm.environment.get(\"hostName\");",
									"var prePath = pm.environment.get(\"prePath\");",
									"",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"console.log(timestamp)",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var path = prePath + \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var signstr = \"AccessKeyId=\"+ak+\"&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=\"+encodeURIComponent(timestamp);",
									"    ",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host+\"\\n\"+",
									"            path+\"\\n\"+",
									"            signstr",
									"console.log(payload);",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, sk);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"console.log(signature);",
									"",
									"var URLSIGN = signstr+\"&Signature=\"+encodeURIComponent(signature)",
									"",
									"pm.collectionVariables.set(\"URLSIGN\",URLSIGN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"sub_uid\": 114400601,\n    \"margin_account\": \"USDT\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostName}}{{prePath}}/swap_cross_sub_account_info?{{URLSIGN}}",
							"host": [
								"{{hostName}}{{prePath}}"
							],
							"path": [
								"swap_cross_sub_account_info"
							],
							"query": [
								{
									"key": "{{URLSIGN}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "sub_position_info",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8c784577-8aa1-406d-8a0f-a04c254d3c49",
								"exec": [
									"var ak = pm.environment.get(\"accessKey\");",
									"var sk = pm.environment.get(\"secretKey\");",
									"var host = pm.environment.get(\"hostName\");",
									"var prePath = pm.environment.get(\"prePath\");",
									"",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"console.log(timestamp)",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var path = prePath + \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var signstr = \"AccessKeyId=\"+ak+\"&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=\"+encodeURIComponent(timestamp);",
									"    ",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host+\"\\n\"+",
									"            path+\"\\n\"+",
									"            signstr",
									"console.log(payload);",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, sk);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"console.log(signature);",
									"",
									"var URLSIGN = signstr+\"&Signature=\"+encodeURIComponent(signature)",
									"",
									"pm.collectionVariables.set(\"URLSIGN\",URLSIGN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"sub_uid\": 114400601,\n    \"contract_code\": \"BTC-USDT\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostName}}{{prePath}}/swap_cross_sub_position_info?{{URLSIGN}}",
							"host": [
								"{{hostName}}{{prePath}}"
							],
							"path": [
								"swap_cross_sub_position_info"
							],
							"query": [
								{
									"key": "{{URLSIGN}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "transfer_limit",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f063f62d-38dd-427c-9575-bc7e7c34f458",
								"exec": [
									"var ak = pm.environment.get(\"accessKey\");",
									"var sk = pm.environment.get(\"secretKey\");",
									"var host = pm.environment.get(\"hostName\");",
									"var prePath = pm.environment.get(\"prePath\");",
									"",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"console.log(timestamp)",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var path = prePath + \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var signstr = \"AccessKeyId=\"+ak+\"&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=\"+encodeURIComponent(timestamp);",
									"    ",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host+\"\\n\"+",
									"            path+\"\\n\"+",
									"            signstr",
									"console.log(payload);",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, sk);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"console.log(signature);",
									"",
									"var URLSIGN = signstr+\"&Signature=\"+encodeURIComponent(signature)",
									"",
									"pm.collectionVariables.set(\"URLSIGN\",URLSIGN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"margin_account\": \"USDT\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostName}}{{prePath}}/swap_cross_transfer_limit?{{URLSIGN}}",
							"host": [
								"{{hostName}}{{prePath}}"
							],
							"path": [
								"swap_cross_transfer_limit"
							],
							"query": [
								{
									"key": "{{URLSIGN}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "position_limit",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "71a3b972-af22-4769-aa59-b92cdfc77d54",
								"exec": [
									"var ak = pm.environment.get(\"accessKey\");",
									"var sk = pm.environment.get(\"secretKey\");",
									"var host = pm.environment.get(\"hostName\");",
									"var prePath = pm.environment.get(\"prePath\");",
									"",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"console.log(timestamp)",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var path = prePath + \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var signstr = \"AccessKeyId=\"+ak+\"&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=\"+encodeURIComponent(timestamp);",
									"    ",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host+\"\\n\"+",
									"            path+\"\\n\"+",
									"            signstr",
									"console.log(payload);",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, sk);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"console.log(signature);",
									"",
									"var URLSIGN = signstr+\"&Signature=\"+encodeURIComponent(signature)",
									"",
									"pm.collectionVariables.set(\"URLSIGN\",URLSIGN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contract_code\": \"BTC-USDT\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostName}}{{prePath}}/swap_cross_position_limit?{{URLSIGN}}",
							"host": [
								"{{hostName}}{{prePath}}"
							],
							"path": [
								"swap_cross_position_limit"
							],
							"query": [
								{
									"key": "{{URLSIGN}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "account_position_info",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "092e9c8f-ea1f-4508-91d0-ade4beb74594",
								"exec": [
									"var ak = pm.environment.get(\"accessKey\");",
									"var sk = pm.environment.get(\"secretKey\");",
									"var host = pm.environment.get(\"hostName\");",
									"var prePath = pm.environment.get(\"prePath\");",
									"",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"console.log(timestamp)",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var path = prePath + \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var signstr = \"AccessKeyId=\"+ak+\"&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=\"+encodeURIComponent(timestamp);",
									"    ",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host+\"\\n\"+",
									"            path+\"\\n\"+",
									"            signstr",
									"console.log(payload);",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, sk);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"console.log(signature);",
									"",
									"var URLSIGN = signstr+\"&Signature=\"+encodeURIComponent(signature)",
									"",
									"pm.collectionVariables.set(\"URLSIGN\",URLSIGN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"margin_account\": \"USDT\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostName}}{{prePath}}/swap_cross_account_position_info?{{URLSIGN}}",
							"host": [
								"{{hostName}}{{prePath}}"
							],
							"path": [
								"swap_cross_account_position_info"
							],
							"query": [
								{
									"key": "{{URLSIGN}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "available_level_rate",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fc5e0a99-b04f-4423-9946-07a5fa6492f0",
								"exec": [
									"var ak = pm.environment.get(\"accessKey\");",
									"var sk = pm.environment.get(\"secretKey\");",
									"var host = pm.environment.get(\"hostName\");",
									"var prePath = pm.environment.get(\"prePath\");",
									"",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"console.log(timestamp)",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var path = prePath + \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var signstr = \"AccessKeyId=\"+ak+\"&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=\"+encodeURIComponent(timestamp);",
									"    ",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host+\"\\n\"+",
									"            path+\"\\n\"+",
									"            signstr",
									"console.log(payload);",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, sk);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"console.log(signature);",
									"",
									"var URLSIGN = signstr+\"&Signature=\"+encodeURIComponent(signature)",
									"",
									"pm.collectionVariables.set(\"URLSIGN\",URLSIGN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contract_code\": \"BTC-USDT\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostName}}{{prePath}}/swap_cross_available_level_rate?{{URLSIGN}}",
							"host": [
								"{{hostName}}{{prePath}}"
							],
							"path": [
								"swap_cross_available_level_rate"
							],
							"query": [
								{
									"key": "{{URLSIGN}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "faf0221d-9bc1-4998-b4f3-ad2ade9cfbb8",
								"exec": [
									"var ak = pm.environment.get(\"accessKey\");",
									"var sk = pm.environment.get(\"secretKey\");",
									"var host = pm.environment.get(\"hostName\");",
									"var prePath = pm.environment.get(\"prePath\");",
									"",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"console.log(timestamp)",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var path = prePath + \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var signstr = \"AccessKeyId=\"+ak+\"&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=\"+encodeURIComponent(timestamp);",
									"    ",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host+\"\\n\"+",
									"            path+\"\\n\"+",
									"            signstr",
									"console.log(payload);",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, sk);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"console.log(signature);",
									"",
									"var URLSIGN = signstr+\"&Signature=\"+encodeURIComponent(signature)",
									"",
									"pm.collectionVariables.set(\"URLSIGN\",URLSIGN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contract_code\": \"BTC-USDT\",\n    \"volume\":1,\n    \"direction\":\"buy\",\n    \"offset\":\"open\",\n    \"lever_rate\":5,\n    \"order_price_type\":\"limit\",\n    \"price\": 35000,\n    \"client_order_id\":6\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostName}}{{prePath}}/swap_cross_order?{{URLSIGN}}",
							"host": [
								"{{hostName}}{{prePath}}"
							],
							"path": [
								"swap_cross_order"
							],
							"query": [
								{
									"key": "{{URLSIGN}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "batchorder",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e1526dbe-2e45-47b6-98e1-d28cef1e2763",
								"exec": [
									"var ak = pm.environment.get(\"accessKey\");",
									"var sk = pm.environment.get(\"secretKey\");",
									"var host = pm.environment.get(\"hostName\");",
									"var prePath = pm.environment.get(\"prePath\");",
									"",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"console.log(timestamp)",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var path = prePath + \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var signstr = \"AccessKeyId=\"+ak+\"&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=\"+encodeURIComponent(timestamp);",
									"    ",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host+\"\\n\"+",
									"            path+\"\\n\"+",
									"            signstr",
									"console.log(payload);",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, sk);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"console.log(signature);",
									"",
									"var URLSIGN = signstr+\"&Signature=\"+encodeURIComponent(signature)",
									"",
									"pm.collectionVariables.set(\"URLSIGN\",URLSIGN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"orders_data\": [\n        {\n            \"contract_code\": \"BTC-USDT\",\n            \"volume\": 1,\n            \"direction\": \"buy\",\n            \"offset\": \"open\",\n            \"lever_rate\": 5,\n            \"order_price_type\": \"limit\",\n            \"price\": 20000,\n            \"client_order_id\": 2\n        },\n        {\n            \"contract_code\": \"BTC-USDT\",\n            \"volume\": 1,\n            \"direction\": \"sell\",\n            \"offset\": \"open\",\n            \"lever_rate\": 5,\n            \"order_price_type\": \"limit\",\n            \"price\": 20000,\n            \"client_order_id\": 3\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostName}}{{prePath}}/swap_cross_batchorder?{{URLSIGN}}",
							"host": [
								"{{hostName}}{{prePath}}"
							],
							"path": [
								"swap_cross_batchorder"
							],
							"query": [
								{
									"key": "{{URLSIGN}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "cancel",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4c23b648-9647-4359-99ad-0328fd95c9aa",
								"exec": [
									"var ak = pm.environment.get(\"accessKey\");",
									"var sk = pm.environment.get(\"secretKey\");",
									"var host = pm.environment.get(\"hostName\");",
									"var prePath = pm.environment.get(\"prePath\");",
									"",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"console.log(timestamp)",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var path = prePath + \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var signstr = \"AccessKeyId=\"+ak+\"&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=\"+encodeURIComponent(timestamp);",
									"    ",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host+\"\\n\"+",
									"            path+\"\\n\"+",
									"            signstr",
									"console.log(payload);",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, sk);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"console.log(signature);",
									"",
									"var URLSIGN = signstr+\"&Signature=\"+encodeURIComponent(signature)",
									"",
									"pm.collectionVariables.set(\"URLSIGN\",URLSIGN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contract_code\": \"BTC-USDT\",\n    \"client_order_id\": \"1,2,3\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostName}}{{prePath}}/swap_cross_cancel?{{URLSIGN}}",
							"host": [
								"{{hostName}}{{prePath}}"
							],
							"path": [
								"swap_cross_cancel"
							],
							"query": [
								{
									"key": "{{URLSIGN}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "cancelall",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "edd1fbc0-6a22-40db-82e1-00e809ea37d7",
								"exec": [
									"var ak = pm.environment.get(\"accessKey\");",
									"var sk = pm.environment.get(\"secretKey\");",
									"var host = pm.environment.get(\"hostName\");",
									"var prePath = pm.environment.get(\"prePath\");",
									"",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"console.log(timestamp)",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var path = prePath + \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var signstr = \"AccessKeyId=\"+ak+\"&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=\"+encodeURIComponent(timestamp);",
									"    ",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host+\"\\n\"+",
									"            path+\"\\n\"+",
									"            signstr",
									"console.log(payload);",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, sk);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"console.log(signature);",
									"",
									"var URLSIGN = signstr+\"&Signature=\"+encodeURIComponent(signature)",
									"",
									"pm.collectionVariables.set(\"URLSIGN\",URLSIGN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contract_code\": \"EOS-USDT\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostName}}{{prePath}}/swap_cross_cancelall?{{URLSIGN}}",
							"host": [
								"{{hostName}}{{prePath}}"
							],
							"path": [
								"swap_cross_cancelall"
							],
							"query": [
								{
									"key": "{{URLSIGN}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "order_info",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cd79c8e3-4e9b-47e8-9dec-926ec98941bf",
								"exec": [
									"var ak = pm.environment.get(\"accessKey\");",
									"var sk = pm.environment.get(\"secretKey\");",
									"var host = pm.environment.get(\"hostName\");",
									"var prePath = pm.environment.get(\"prePath\");",
									"",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"console.log(timestamp)",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var path = prePath + \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var signstr = \"AccessKeyId=\"+ak+\"&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=\"+encodeURIComponent(timestamp);",
									"    ",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host+\"\\n\"+",
									"            path+\"\\n\"+",
									"            signstr",
									"console.log(payload);",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, sk);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"console.log(signature);",
									"",
									"var URLSIGN = signstr+\"&Signature=\"+encodeURIComponent(signature)",
									"",
									"pm.collectionVariables.set(\"URLSIGN\",URLSIGN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contract_code\": \"BTC-USDT\",\n    \"client_order_id\": \"1,2,3\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostName}}{{prePath}}/swap_cross_order_info?{{URLSIGN}}",
							"host": [
								"{{hostName}}{{prePath}}"
							],
							"path": [
								"swap_cross_order_info"
							],
							"query": [
								{
									"key": "{{URLSIGN}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "order_detail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "038c9d3b-afae-4bc0-8dda-4aa6955dc51d",
								"exec": [
									"var ak = pm.environment.get(\"accessKey\");",
									"var sk = pm.environment.get(\"secretKey\");",
									"var host = pm.environment.get(\"hostName\");",
									"var prePath = pm.environment.get(\"prePath\");",
									"",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"console.log(timestamp)",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var path = prePath + \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var signstr = \"AccessKeyId=\"+ak+\"&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=\"+encodeURIComponent(timestamp);",
									"    ",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host+\"\\n\"+",
									"            path+\"\\n\"+",
									"            signstr",
									"console.log(payload);",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, sk);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"console.log(signature);",
									"",
									"var URLSIGN = signstr+\"&Signature=\"+encodeURIComponent(signature)",
									"",
									"pm.collectionVariables.set(\"URLSIGN\",URLSIGN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contract_code\": \"BTC-USDT\",\n    \"order_id\": \"782999902278791168\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostName}}{{prePath}}/swap_cross_order_detail?{{URLSIGN}}",
							"host": [
								"{{hostName}}{{prePath}}"
							],
							"path": [
								"swap_cross_order_detail"
							],
							"query": [
								{
									"key": "{{URLSIGN}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "switch_lever_rate",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0a998518-baa4-42ce-9a0b-900ee7320f77",
								"exec": [
									"var ak = pm.environment.get(\"accessKey\");",
									"var sk = pm.environment.get(\"secretKey\");",
									"var host = pm.environment.get(\"hostName\");",
									"var prePath = pm.environment.get(\"prePath\");",
									"",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"console.log(timestamp)",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var path = prePath + \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var signstr = \"AccessKeyId=\"+ak+\"&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=\"+encodeURIComponent(timestamp);",
									"    ",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host+\"\\n\"+",
									"            path+\"\\n\"+",
									"            signstr",
									"console.log(payload);",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, sk);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"console.log(signature);",
									"",
									"var URLSIGN = signstr+\"&Signature=\"+encodeURIComponent(signature)",
									"",
									"pm.collectionVariables.set(\"URLSIGN\",URLSIGN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contract_code\": \"BTC-USDT\",\n    \"lever_rate\": 5\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostName}}{{prePath}}/swap_cross_switch_lever_rate?{{URLSIGN}}",
							"host": [
								"{{hostName}}{{prePath}}"
							],
							"path": [
								"swap_cross_switch_lever_rate"
							],
							"query": [
								{
									"key": "{{URLSIGN}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "openorders",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2e01e189-e82e-45be-a93c-68bcfcb9c9de",
								"exec": [
									"var ak = pm.environment.get(\"accessKey\");",
									"var sk = pm.environment.get(\"secretKey\");",
									"var host = pm.environment.get(\"hostName\");",
									"var prePath = pm.environment.get(\"prePath\");",
									"",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"console.log(timestamp)",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var path = prePath + \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var signstr = \"AccessKeyId=\"+ak+\"&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=\"+encodeURIComponent(timestamp);",
									"    ",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host+\"\\n\"+",
									"            path+\"\\n\"+",
									"            signstr",
									"console.log(payload);",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, sk);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"console.log(signature);",
									"",
									"var URLSIGN = signstr+\"&Signature=\"+encodeURIComponent(signature)",
									"",
									"pm.collectionVariables.set(\"URLSIGN\",URLSIGN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contract_code\": \"BTC-USDT\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostName}}{{prePath}}/swap_cross_openorders?{{URLSIGN}}",
							"host": [
								"{{hostName}}{{prePath}}"
							],
							"path": [
								"swap_cross_openorders"
							],
							"query": [
								{
									"key": "{{URLSIGN}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "hisorders",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "72673586-b08d-4f4d-8293-5237b34ea5d7",
								"exec": [
									"var ak = pm.environment.get(\"accessKey\");",
									"var sk = pm.environment.get(\"secretKey\");",
									"var host = pm.environment.get(\"hostName\");",
									"var prePath = pm.environment.get(\"prePath\");",
									"",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"console.log(timestamp)",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var path = prePath + \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var signstr = \"AccessKeyId=\"+ak+\"&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=\"+encodeURIComponent(timestamp);",
									"    ",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host+\"\\n\"+",
									"            path+\"\\n\"+",
									"            signstr",
									"console.log(payload);",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, sk);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"console.log(signature);",
									"",
									"var URLSIGN = signstr+\"&Signature=\"+encodeURIComponent(signature)",
									"",
									"pm.collectionVariables.set(\"URLSIGN\",URLSIGN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contract_code\": \"BTC-USDT\",\n    \"trade_type\": 0,\n    \"type\": 1,\n    \"status\": 0,\n    \"create_date\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostName}}{{prePath}}/swap_cross_hisorders?{{URLSIGN}}",
							"host": [
								"{{hostName}}{{prePath}}"
							],
							"path": [
								"swap_cross_hisorders"
							],
							"query": [
								{
									"key": "{{URLSIGN}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "matchresults",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "20fbe978-8bb7-4e50-a875-ed5494e442ae",
								"exec": [
									"var ak = pm.environment.get(\"accessKey\");",
									"var sk = pm.environment.get(\"secretKey\");",
									"var host = pm.environment.get(\"hostName\");",
									"var prePath = pm.environment.get(\"prePath\");",
									"",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"console.log(timestamp)",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var path = prePath + \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var signstr = \"AccessKeyId=\"+ak+\"&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=\"+encodeURIComponent(timestamp);",
									"    ",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host+\"\\n\"+",
									"            path+\"\\n\"+",
									"            signstr",
									"console.log(payload);",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, sk);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"console.log(signature);",
									"",
									"var URLSIGN = signstr+\"&Signature=\"+encodeURIComponent(signature)",
									"",
									"pm.collectionVariables.set(\"URLSIGN\",URLSIGN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contract_code\": \"BTC-USDT\",\n    \"trade_type\": 0,\n    \"type\": 1,\n    \"status\": 0,\n    \"create_date\":1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostName}}{{prePath}}/swap_cross_matchresults?{{URLSIGN}}",
							"host": [
								"{{hostName}}{{prePath}}"
							],
							"path": [
								"swap_cross_matchresults"
							],
							"query": [
								{
									"key": "{{URLSIGN}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "lightning_close_position",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8994e0a1-2111-437f-8042-bed3cc9c92bd",
								"exec": [
									"var ak = pm.environment.get(\"accessKey\");",
									"var sk = pm.environment.get(\"secretKey\");",
									"var host = pm.environment.get(\"hostName\");",
									"var prePath = pm.environment.get(\"prePath\");",
									"",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"console.log(timestamp)",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var path = prePath + \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var signstr = \"AccessKeyId=\"+ak+\"&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=\"+encodeURIComponent(timestamp);",
									"    ",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host+\"\\n\"+",
									"            path+\"\\n\"+",
									"            signstr",
									"console.log(payload);",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, sk);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"console.log(signature);",
									"",
									"var URLSIGN = signstr+\"&Signature=\"+encodeURIComponent(signature)",
									"",
									"pm.collectionVariables.set(\"URLSIGN\",URLSIGN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contract_code\": \"BTC-USDT\",\n    \"volume\": 1,\n    \"direction\": \"buy\",\n    \"order_price_type\": \"lightning\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostName}}{{prePath}}/swap_cross_lightning_close_position?{{URLSIGN}}",
							"host": [
								"{{hostName}}{{prePath}}"
							],
							"path": [
								"swap_cross_lightning_close_position"
							],
							"query": [
								{
									"key": "{{URLSIGN}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "trigger_order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3af876e1-2762-4d27-8bb4-7ac5e01cbefa",
								"exec": [
									"var ak = pm.environment.get(\"accessKey\");",
									"var sk = pm.environment.get(\"secretKey\");",
									"var host = pm.environment.get(\"hostName\");",
									"var prePath = pm.environment.get(\"prePath\");",
									"",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"console.log(timestamp)",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var path = prePath + \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var signstr = \"AccessKeyId=\"+ak+\"&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=\"+encodeURIComponent(timestamp);",
									"    ",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host+\"\\n\"+",
									"            path+\"\\n\"+",
									"            signstr",
									"console.log(payload);",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, sk);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"console.log(signature);",
									"",
									"var URLSIGN = signstr+\"&Signature=\"+encodeURIComponent(signature)",
									"",
									"pm.collectionVariables.set(\"URLSIGN\",URLSIGN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contract_code\": \"BTC-USDT\",\n    \"trigger_type\": \"ge\",\n    \"trigger_price\": 40000,\n    \"order_price\": 40000,\n    \"order_price_type\": \"limit\",\n    \"volume\": 4,\n    \"direction\": \"sell\",\n    \"offset\": \"open\",\n    \"lever_rate\": 5\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostName}}{{prePath}}/swap_cross_trigger_order?{{URLSIGN}}",
							"host": [
								"{{hostName}}{{prePath}}"
							],
							"path": [
								"swap_cross_trigger_order"
							],
							"query": [
								{
									"key": "{{URLSIGN}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "trigger_cancel",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "aa74b713-d09c-418b-90d1-c5184ef61b89",
								"exec": [
									"var ak = pm.environment.get(\"accessKey\");",
									"var sk = pm.environment.get(\"secretKey\");",
									"var host = pm.environment.get(\"hostName\");",
									"var prePath = pm.environment.get(\"prePath\");",
									"",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"console.log(timestamp)",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var path = prePath + \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var signstr = \"AccessKeyId=\"+ak+\"&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=\"+encodeURIComponent(timestamp);",
									"    ",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host+\"\\n\"+",
									"            path+\"\\n\"+",
									"            signstr",
									"console.log(payload);",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, sk);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"console.log(signature);",
									"",
									"var URLSIGN = signstr+\"&Signature=\"+encodeURIComponent(signature)",
									"",
									"pm.collectionVariables.set(\"URLSIGN\",URLSIGN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contract_code\": \"BTC-USDT\",\n    \"order_id\": \"1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostName}}{{prePath}}/swap_cross_trigger_cancel?{{URLSIGN}}",
							"host": [
								"{{hostName}}{{prePath}}"
							],
							"path": [
								"swap_cross_trigger_cancel"
							],
							"query": [
								{
									"key": "{{URLSIGN}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "trigger_cancelall",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bb36c85c-68b8-4a30-941f-69a22a6ae017",
								"exec": [
									"var ak = pm.environment.get(\"accessKey\");",
									"var sk = pm.environment.get(\"secretKey\");",
									"var host = pm.environment.get(\"hostName\");",
									"var prePath = pm.environment.get(\"prePath\");",
									"",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"console.log(timestamp)",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var path = prePath + \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var signstr = \"AccessKeyId=\"+ak+\"&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=\"+encodeURIComponent(timestamp);",
									"    ",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host+\"\\n\"+",
									"            path+\"\\n\"+",
									"            signstr",
									"console.log(payload);",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, sk);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"console.log(signature);",
									"",
									"var URLSIGN = signstr+\"&Signature=\"+encodeURIComponent(signature)",
									"",
									"pm.collectionVariables.set(\"URLSIGN\",URLSIGN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contract_code\": \"BTC-USDT\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostName}}{{prePath}}/swap_cross_trigger_cancelall?{{URLSIGN}}",
							"host": [
								"{{hostName}}{{prePath}}"
							],
							"path": [
								"swap_cross_trigger_cancelall"
							],
							"query": [
								{
									"key": "{{URLSIGN}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "trigger_openorders",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "160c5584-07a2-4f5d-933b-fc6670d3ba14",
								"exec": [
									"var ak = pm.environment.get(\"accessKey\");",
									"var sk = pm.environment.get(\"secretKey\");",
									"var host = pm.environment.get(\"hostName\");",
									"var prePath = pm.environment.get(\"prePath\");",
									"",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"console.log(timestamp)",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var path = prePath + \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var signstr = \"AccessKeyId=\"+ak+\"&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=\"+encodeURIComponent(timestamp);",
									"    ",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host+\"\\n\"+",
									"            path+\"\\n\"+",
									"            signstr",
									"console.log(payload);",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, sk);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"console.log(signature);",
									"",
									"var URLSIGN = signstr+\"&Signature=\"+encodeURIComponent(signature)",
									"",
									"pm.collectionVariables.set(\"URLSIGN\",URLSIGN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contract_code\": \"BTC-USDT\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostName}}{{prePath}}/swap_cross_trigger_openorders?{{URLSIGN}}",
							"host": [
								"{{hostName}}{{prePath}}"
							],
							"path": [
								"swap_cross_trigger_openorders"
							],
							"query": [
								{
									"key": "{{URLSIGN}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "trigger_hisorders",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4c9732aa-865d-45f7-8a44-a5918d93fb40",
								"exec": [
									"var ak = pm.environment.get(\"accessKey\");",
									"var sk = pm.environment.get(\"secretKey\");",
									"var host = pm.environment.get(\"hostName\");",
									"var prePath = pm.environment.get(\"prePath\");",
									"",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"console.log(timestamp)",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var path = prePath + \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var signstr = \"AccessKeyId=\"+ak+\"&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=\"+encodeURIComponent(timestamp);",
									"    ",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host+\"\\n\"+",
									"            path+\"\\n\"+",
									"            signstr",
									"console.log(payload);",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, sk);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"console.log(signature);",
									"",
									"var URLSIGN = signstr+\"&Signature=\"+encodeURIComponent(signature)",
									"",
									"pm.collectionVariables.set(\"URLSIGN\",URLSIGN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contract_code\": \"BTC-USDT\",\n    \"trade_type\":0,\n    \"status\":0,\n    \"create_date\":1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostName}}{{prePath}}/swap_cross_trigger_hisorders?{{URLSIGN}}",
							"host": [
								"{{hostName}}{{prePath}}"
							],
							"path": [
								"swap_cross_trigger_hisorders"
							],
							"query": [
								{
									"key": "{{URLSIGN}}",
									"value": null
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "swap_position_info",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ed55399b-27a5-4363-b3df-b242c0d50c76",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "dfdd27aa-25b5-4454-98d2-c5cd4170009b",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_position_info?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_position_info"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_account_position_info",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "5408fa50-8bd5-4fa5-9dc2-931493e1e694",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "fefd6a92-75a7-4967-b134-081ec8d7651e",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"contract_code\": \"BTC-USDT\"}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_account_position_info?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_account_position_info"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_sub_account_list",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "fed612f4-6ff9-4877-b2ad-862982d7d789",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "27b5c1ef-3b52-4f6f-8b75-3f13f069511e",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"contract_code\": \"BTC-USDT\"}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_sub_account_list?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_sub_account_list"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_sub_account_info",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "69aa083b-19e7-43f8-8c51-0b869fa6929e",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "019fedd5-fef4-4de7-9f00-001b07a00d82",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"contract_code\": \"BTC-USDT\",\"sub_uid\": 1}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_sub_account_info?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_sub_account_info"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_sub_position_info",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b6acfc3f-6752-4545-8565-42a8fcaee043",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "f5fcd103-980a-4db1-8595-78bfde3fec4d",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"contract_code\": \"BTC-USDT\",\"sub_uid\": 1}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_sub_position_info?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_sub_position_info"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_financial_record",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "504720f8-25dc-4002-80a5-3d33adda3f5b",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "68669226-8da0-4b95-a5a4-f2336ccefd01",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"margin_account\": \"BTC-USDT\"}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_financial_record?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_financial_record"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_available_level_rate",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b8855a99-f1f1-46b3-acf1-5ac9969586b7",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "d565da3a-1adc-4397-84a7-a698f543ddc9",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"contract_code\":\"btc-usdt\"}"
				},
				"url": {
					"raw": "http://api.hbdm.com/linear-swap-api/v1/swap_available_level_rate?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"com"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_available_level_rate"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_order_limit",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "770b279e-d53d-4d9d-86d3-b97d203bcaa5",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "db8c2785-4b69-4c59-9c27-aa62c0337deb",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"order_price_type\": \"limit\"}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_order_limit?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_order_limit"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_fee",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "06e4353a-7c65-4038-94b7-bcea6a77a181",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "17d21074-6e2d-457f-8dcb-b28edf99c15c",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_fee?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_fee"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_transfer_limit",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "0de9e428-e001-4931-b4a4-3ea7c0c3f0d8",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "660453ff-0113-406b-8390-02e9ec31ceab",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"contract_code\": \"BTC-USDT\"}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_transfer_limit?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_transfer_limit"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_position_limit",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f6124dd8-aade-42e9-a7e9-030b6f23d298",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "74234100-b66c-4557-85e7-828726d80157",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_position_limit?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_position_limit"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_master_sub_transfer",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "87d8243d-09ac-49b8-91df-3df13c191126",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "d90c627c-a932-4f36-92e9-f18daffcd29e",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"sub_uid\": 1,\n    \"asset\": \"USDT\",\n    \"from_margin_account\": \"BTC-USDT\",\n    \"to_margin_account\": \"BTC-USDT\",\n    \"amount\": 10,\n    \"type\": \"master_to_sub\"\n}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_master_sub_transfer?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_master_sub_transfer"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_master_sub_transfer_record",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "188dbcc6-a06e-4053-956e-8e62014962f2",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "21ab8934-f102-4223-bd9b-85e7d93cecab",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"margin_account\": \"BTC-USDT\",\n    \"transfer_type\": \"34\",\n    \"create_date\": 10\n}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_master_sub_transfer_record?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_master_sub_transfer_record"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_transfer_inner",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a565c815-7b8d-4fab-bdc3-0b5c4ba1ab70",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b419d856-c2bf-405b-a026-c3069e6872f7",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"from_margin_account\": \"BTC-USDT\",\n    \"to_margin_account\": \"ETH-USDT\",\n    \"amount\": 10,\n    \"asset\": \"USDT\"\n}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_transfer_inner?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_transfer_inner"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_api_trading_status",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e95aa280-4648-40fd-9202-338aa073da83",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "de3f7f78-0ec2-4af7-be4b-4708773fd096",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_api_trading_status?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_api_trading_status"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_order",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "99c64bdc-63fa-4099-a957-e9a0562eeeeb",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"volume\": 5,\n    \"price\": 8000,\n    \"client_order_id\": 57012021022,\n    \"contract_code\": \"BTC-USDT\",\n    \"direction\": \"sell\",\n    \"offset\": \"open\",\n    \"order_price_type\": \"limit\",\n    \"lever_rate\": 1\n}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_order?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_order"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_batchorder",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "66202838-b204-4b0e-a0ca-0b620783dcbf",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"orders_data\": [\n        {\n            \"volume\": 1,\n            \"price\": 10329,\n            \"client_order_id\": 57012021024,\n            \"contract_code\": \"BTC-USDT\",\n            \"direction\": \"sell\",\n            \"offset\": \"open\",\n            \"order_price_type\": \"limit\",\n            \"lever_rate\": 1\n        }\n    ]\n}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_batchorder?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_batchorder"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_cancel",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "3ee79257-ae1e-4cfe-992f-a6a4cec7923d",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"order_id\": \"758437106720993280\",\n\"contract_code\": \"BTC-USDT\"\n}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_cancel?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_cancel"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_cancelall",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e9a48fb9-f83c-4838-bc69-5901a0a30b94",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"contract_code\": \"BTC-USDT\"}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_cancelall?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_cancelall"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_switch_lever_rate",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d9d50334-883d-433f-9616-833902c81e6f",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "368bea50-1690-40da-9cc5-1e40972ffde0",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"contract_code\": \"btc-usdt\",\"lever_rate\":10}"
				},
				"url": {
					"raw": "http://api.hbdm.com/linear-swap-api/v1/swap_switch_lever_rate?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"com"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_switch_lever_rate"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_order_info",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d1ac0524-1e6a-495c-86c8-e46425d2499b",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"order_id\": \"758438520448905216\",\n    \"contract_code\": \"BTC-USDT\"\n}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_order_info?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_order_info"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_order_detail",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "9ace49ea-e637-4405-8d07-f9913ea4ce13",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"order_id\": 758438520448905216,\n    \"contract_code\": \"BTC-USDT\",\n    \"created_at\": 1600866854727,\n    \"order_type\": 1\n}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_order_detail?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_order_detail"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_openorders",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "47374cc0-c96e-4e6d-9866-60151c46e19b",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"order_id\": 758438520448905216,\n    \"contract_code\": \"BTC-USDT\",\n    \"created_at\": 1600866854727,\n    \"order_type\": 1\n}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_openorders?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_openorders"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_hisorders",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e96f7408-03e0-4c65-8a2b-01956f67c02a",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"contract_code\": \"BTC-USDT\",\n    \"trade_type\": 0,\n    \"type\": 1,\n    \"status\": 0,\n    \"create_date\": 1,\n    \"page_index\": 1,\n    \"page_size\": 2\n}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_hisorders?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_hisorders"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_matchresults",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e5163fff-0534-4acb-9fad-5a4853b32b77",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"contract_code\": \"BTC-USDT\",\n    \"trade_type\": 0,\n    \"create_date\": 1,\n    \"page_index\": 1,\n    \"page_size\": 2\n}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_matchresults?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_matchresults"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_lightning_close_position",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "7c4ba84f-53a1-445f-84f4-95fc96f699df",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"contract_code\": \"BTC-USDT\",\n    \"volume\": 1,\n    \"direction\": \"buy\",\n    \"client_order_id\": 11\n}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_lightning_close_position?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_lightning_close_position"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_trigger_order",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "2a31e398-ddac-422f-b053-bb0d40a87ba4",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"contract_code\": \"BTC-USDT\",\n    \"trigger_type\": \"ge\",\n    \"trigger_price\": 10387,\n    \"order_price\": 10367,\n    \"order_price_type\": \"limit\",\n    \"volume\": 1,\n    \"direction\": \"buy\",\n    \"offset\": \"open\",\n    \"lever_rate\": 1\n}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_trigger_order?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_trigger_order"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_trigger_cancel",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "1155b45f-c103-4b77-9210-9d4516c853f1",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"contract_code\": \"BTC-USDT\",\n\t\"order_id\": \"34,1\"\n}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_trigger_cancel?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_trigger_cancel"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_trigger_cancelall",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "8cec3430-4996-4d6e-b33d-c70af19552d0",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"contract_code\": \"BTC-USDT\"\n}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_trigger_cancelall?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_trigger_cancelall"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_trigger_openorders",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "3a6b0ae0-b628-44b6-b06c-d9acf79fce16",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"contract_code\": \"BTC-USDT\"\n}"
				},
				"url": {
					"raw": "http://api.hbdm.com/linear-swap-api/v1/swap_trigger_openorders?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"com"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_trigger_openorders"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_trigger_hisorders",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c3d99009-4ff6-497a-8018-43e464283546",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"contract_code\": \"BTC-USDT\",\n    \"trade_type\": 0,\n    \"status\": \"0\",\n    \"create_date\": 1\n}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_trigger_hisorders?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_trigger_hisorders"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "transfer",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "8243f076-f007-48b5-af2e-8bb6d29cfd3a",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"from\": \"linear-swap\",\n    \"to\": \"spot\",\n    \"currency\": \"usdt\",\n    \"amount\": 10,\n    \"margin-account\":\"btc-usdt\"\n}"
				},
				"url": {
					"raw": "https://api.huobi.pro/v2/account/transfer?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "https",
					"host": [
						"api",
						"huobi",
						"pro"
					],
					"path": [
						"v2",
						"account",
						"transfer"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_index",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e19fed7b-499b-467d-ab2e-70cf6418f6ad",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_index",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_index"
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_contract_info",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f774b657-0455-4628-9a67-bc8f96d627e4",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_contract_info?contract_code=BTC-USDT",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_contract_info"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_price_limit",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "dc27d3ed-f026-4225-9672-f8742c63261f",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_price_limit?contract_code=BTC-USDT",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_price_limit"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_open_interest",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "96362d87-0670-4871-b055-ebc93f200f78",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_open_interest?contract_code=BTC-USDT",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_open_interest"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "market depth",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "feb39ad1-5746-4973-be06-aeb8b7bd31e5",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-ex/market/depth?contract_code=BTC-USDT&type=step0",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-ex",
						"market",
						"depth"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT"
						},
						{
							"key": "type",
							"value": "step0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "klines",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ab17f84f-0c8d-4c56-94f4-80b36ba0b316",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-ex/market/history/kline?contract_code=BTC-USDT&period=1day&size=2",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-ex",
						"market",
						"history",
						"kline"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT"
						},
						{
							"key": "period",
							"value": "1day"
						},
						{
							"key": "size",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "market merged data",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "159d8d86-7e50-403a-a62c-5ac4efa34770",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-ex/market/detail/merged?contract_code=BTC-USDT",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-ex",
						"market",
						"detail",
						"merged"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "market trade",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a222222d-ea65-4ee5-804e-5026cb220ceb",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-ex/market/trade?contract_code=BTC-USDT",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-ex",
						"market",
						"trade"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_risk_info",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "8621921d-cf7b-46e8-b187-9dcebf25dc98",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_risk_info?contract_code=BTC-USDT",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_risk_info"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_insurance_fund",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d6e5d19b-6315-456d-9af5-909f2d144c1b",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_insurance_fund?contract_code=BTC-USDT",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_insurance_fund"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_swap_adjustfactor",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a84256b4-6245-438c-ad00-7a6abe1a3668",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_adjustfactor?contract_code=BTC-USDT",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_adjustfactor"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_his_open_interest",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "48e59ce2-6687-4263-964c-4baaa144cd0a",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_his_open_interest?contract_code=BTC-USDT&period=60min&amount_type=1",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_his_open_interest"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT"
						},
						{
							"key": "period",
							"value": "60min"
						},
						{
							"key": "amount_type",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_elite_account_ratio",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "34a628ff-b48f-44f4-b834-f99992132375",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_elite_account_ratio?contract_code=BTC-USDT&period=60min&amount_type=1",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_elite_account_ratio"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT"
						},
						{
							"key": "period",
							"value": "60min"
						},
						{
							"key": "amount_type",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_elite_position_ratio",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "6e6e677b-28aa-4b0b-8a29-ce8e62b0a735",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_elite_position_ratio?contract_code=BTC-USDT&period=60min",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_elite_position_ratio"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT"
						},
						{
							"key": "period",
							"value": "60min"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_api_state",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "1e756641-1079-401f-860e-16807cdf1c68",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_api_state",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_api_state"
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_funding_rate",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "79ab46a3-71df-41df-a0da-704ae5605f31",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_funding_rate?contract_code=BTC-USDT",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_funding_rate"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_historical_funding_rate",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f66c1603-27a2-4c8b-8c88-c14e307cb21c",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_historical_funding_rate?contract_code=BTC-USDT",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_historical_funding_rate"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_liquidation_orders",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "3b3bd729-8b48-4eb4-9efe-864c82aa3fbc",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_liquidation_orders?contract_code=BTC-USDT&trade_type=0&create_date=90",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_liquidation_orders"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT"
						},
						{
							"key": "trade_type",
							"value": "0"
						},
						{
							"key": "create_date",
							"value": "90"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "linear_swap_premium_index_kline",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e45cd522-bead-45fc-8c3d-7df58cbcefd8",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/index/market/history/linear_swap_premium_index_kline?contract_code=BTC-USDT&period=1min&size=10",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"index",
						"market",
						"history",
						"linear_swap_premium_index_kline"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT"
						},
						{
							"key": "period",
							"value": "1min"
						},
						{
							"key": "size",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "linear_swap_estimated_rate_kline",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f162c694-1451-45fc-9a14-d91c961eade7",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/index/market/history/linear_swap_estimated_rate_kline?contract_code=BTC-USDT&period=1min&size=10",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"index",
						"market",
						"history",
						"linear_swap_estimated_rate_kline"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT"
						},
						{
							"key": "period",
							"value": "1min"
						},
						{
							"key": "size",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "linear_swap_basis",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "929581d7-26e3-49da-a3e7-352f38769e9f",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/index/market/history/linear_swap_basis?contract_code=BTC-USDT&period=1min&size=2",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"index",
						"market",
						"history",
						"linear_swap_basis"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT"
						},
						{
							"key": "period",
							"value": "1min"
						},
						{
							"key": "size",
							"value": "2"
						}
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"id": "987c9dc3-3b5d-4c8c-a29f-e791c4492556",
			"key": "URLSIGN",
			"value": ""
		}
	],
	"protocolProfileBehavior": {}
}