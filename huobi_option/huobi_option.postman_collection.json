{
	"info": {
		"_postman_id": "1badafd1-8aa5-490c-83f1-d04cb0088fb2",
		"name": "huobi_option",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "option_contract_info",
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://api.hbdm.vn/option-api/v1/option_contract_info?contract_code=BTC-USDT-201225-C-13000",
					"protocol": "https",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"option-api",
						"v1",
						"option_contract_info"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT-201225-C-13000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "option_index",
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://api.hbdm.vn/option-api/v1/option_index?symbol=BTC-USDT",
					"protocol": "https",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"option-api",
						"v1",
						"option_index"
					],
					"query": [
						{
							"key": "symbol",
							"value": "BTC-USDT"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "option_price_limit",
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://api.hbdm.vn/option-api/v1/option_price_limit?contract_code=BTC-USDT-201225-C-13000",
					"protocol": "https",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"option-api",
						"v1",
						"option_price_limit"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT-201225-C-13000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "option_market_index",
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://api.hbdm.vn/option-api/v1/option_market_index?contract_code=BTC-USDT-201225-C-13000",
					"protocol": "https",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"option-api",
						"v1",
						"option_market_index"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT-201225-C-13000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "option_open_interest",
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://api.hbdm.vn/option-api/v1/option_open_interest?contract_code=BTC-USDT-201225-C-13000",
					"protocol": "https",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"option-api",
						"v1",
						"option_open_interest"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT-201225-C-13000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "option_delivery_price",
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://api.hbdm.vn/option-api/v1/option_delivery_price?symbol=BTC",
					"protocol": "https",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"option-api",
						"v1",
						"option_delivery_price"
					],
					"query": [
						{
							"key": "symbol",
							"value": "BTC"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "option_his_open_interest",
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://api.hbdm.vn/option-api/v1/option_his_open_interest?symbol=BTC&trade_partition=usdt&contract_type=quarter&period=60min&size=20&amount_type=1&option_right_type=C",
					"protocol": "https",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"option-api",
						"v1",
						"option_his_open_interest"
					],
					"query": [
						{
							"key": "symbol",
							"value": "BTC"
						},
						{
							"key": "trade_partition",
							"value": "usdt"
						},
						{
							"key": "contract_type",
							"value": "quarter"
						},
						{
							"key": "period",
							"value": "60min"
						},
						{
							"key": "size",
							"value": "20"
						},
						{
							"key": "amount_type",
							"value": "1"
						},
						{
							"key": "option_right_type",
							"value": "C"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "option_api_state",
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://api.hbdm.vn/option-api/v1/option_api_state?symbol=BTC&trade_partition=usdt",
					"protocol": "https",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"option-api",
						"v1",
						"option_api_state"
					],
					"query": [
						{
							"key": "symbol",
							"value": "BTC"
						},
						{
							"key": "trade_partition",
							"value": "usdt"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "market depth",
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://api.hbdm.vn/option-ex/market/depth?contract_code=BTC-USDT-201225-C-13000&type=step6",
					"protocol": "https",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"option-ex",
						"market",
						"depth"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT-201225-C-13000"
						},
						{
							"key": "type",
							"value": "step6"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "markdet history kline",
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://api.hbdm.vn/option-ex/market/history/kline?contract_code=BTC-USDT-201225-C-13000&period=5min&size=10",
					"protocol": "https",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"option-ex",
						"market",
						"history",
						"kline"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT-201225-C-13000"
						},
						{
							"key": "period",
							"value": "5min"
						},
						{
							"key": "size",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "markdet detail merged",
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://api.hbdm.vn/option-ex/market/detail/merged?contract_code=BTC-USDT-201225-C-13000",
					"protocol": "https",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"option-ex",
						"market",
						"detail",
						"merged"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT-201225-C-13000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "markdet trade",
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://api.hbdm.vn/option-ex/market/trade?contract_code=BTC-USDT-201225-C-13000",
					"protocol": "https",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"option-ex",
						"market",
						"trade"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT-201225-C-13000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "markdet history trade",
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://api.hbdm.vn/option-ex/market/history/trade?contract_code=BTC-USDT-201225-C-13000&size=10",
					"protocol": "https",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"option-ex",
						"market",
						"history",
						"trade"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT-201225-C-13000"
						},
						{
							"key": "size",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "option_balance_valuation",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"var url=pm.environment.get(\"hostName\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"if(url!=null){",
							"    var host=url;",
							"    console.log(host);",
							"}else{",
							"    var host = pm.request.url.host.join(\".\");",
							"    console.log(host);",
							"}",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"valuation_asset\":\"btc\"}"
				},
				"url": {
					"raw": "{{hostName}}/option-api/v1/option_balance_valuation?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"host": [
						"{{hostName}}"
					],
					"path": [
						"option-api",
						"v1",
						"option_balance_valuation"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "option_account_info",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b77c8a1f-8723-4900-9d71-18193725c233",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://api.hbdm.vn/option-api/v1/option_account_info?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "https",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"option-api",
						"v1",
						"option_account_info"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "option_position_info",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b77c8a1f-8723-4900-9d71-18193725c233",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://api.hbdm.vn/option-api/v1/option_position_info?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "https",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"option-api",
						"v1",
						"option_position_info"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "option_sub_auth",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b77c8a1f-8723-4900-9d71-18193725c233",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"var url=pm.environment.get(\"hostName\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"if(url!=null){",
							"    var host=url;",
							"    console.log(host);",
							"}else{",
							"    var host = pm.request.url.host.join(\".\");",
							"    console.log(host);",
							"}",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"sub_uid\": \"123,122343\",\n    \"sub_auth\": 1\n}"
				},
				"url": {
					"raw": "https://{{hostName}}/option-api/v1/option_sub_auth?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "https",
					"host": [
						"{{hostName}}"
					],
					"path": [
						"option-api",
						"v1",
						"option_sub_auth"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "option_sub_account_list",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b77c8a1f-8723-4900-9d71-18193725c233",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://api.hbdm.vn/option-api/v1/option_sub_account_list?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "https",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"option-api",
						"v1",
						"option_sub_account_list"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "option_sub_account_info_list",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b77c8a1f-8723-4900-9d71-18193725c233",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"var url=pm.environment.get(\"hostName\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"if(url!=null){",
							"    var host=url;",
							"    console.log(host);",
							"}else{",
							"    var host = pm.request.url.host.join(\".\");",
							"    console.log(host);",
							"}",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"symbol\": \"btc\"\n}"
				},
				"url": {
					"raw": "{{hostName}}/option-api/v1/option_sub_account_info_list?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"host": [
						"{{hostName}}"
					],
					"path": [
						"option-api",
						"v1",
						"option_sub_account_info_list"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "option_sub_account_info",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b77c8a1f-8723-4900-9d71-18193725c233",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"symbol\": \"btc\",\n    \"trade_partition\": \"usdt\",\n    \"sub_uid\": 1\n}"
				},
				"url": {
					"raw": "https://api.hbdm.vn/option-api/v1/option_sub_account_info?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "https",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"option-api",
						"v1",
						"option_sub_account_info"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "option_sub_position_info",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b77c8a1f-8723-4900-9d71-18193725c233",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"symbol\": \"btc\",\n    \"trade_partition\": \"usdt\",\n    \"sub_uid\": 1\n}"
				},
				"url": {
					"raw": "https://api.hbdm.vn/option-api/v1/option_sub_position_info?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "https",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"option-api",
						"v1",
						"option_sub_position_info"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "option_financial_record",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b77c8a1f-8723-4900-9d71-18193725c233",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"symbol\": \"usdt\",\n    \"trade_partition\": \"USDT\",\n    \"create_date\": 7\n}"
				},
				"url": {
					"raw": "https://api.hbdm.vn/option-api/v1/option_financial_record?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "https",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"option-api",
						"v1",
						"option_financial_record"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "option_order_limit",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b77c8a1f-8723-4900-9d71-18193725c233",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"symbol\": \"btc\",\n    \"trade_partition\": \"usdt\",\n    \"order_price_type\": \"limit\"\n}"
				},
				"url": {
					"raw": "https://api.hbdm.vn/option-api/v1/option_order_limit?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "https",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"option-api",
						"v1",
						"option_order_limit"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "option_fee",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b77c8a1f-8723-4900-9d71-18193725c233",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"symbol\": \"btc\",\n    \"trade_partition\": \"usdt\"\n}"
				},
				"url": {
					"raw": "https://api.hbdm.vn/option-api/v1/option_fee?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "https",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"option-api",
						"v1",
						"option_fee"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "option_transfer_limit",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b77c8a1f-8723-4900-9d71-18193725c233",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"symbol\": \"btc\",\n    \"trade_partition\": \"usdt\"\n}"
				},
				"url": {
					"raw": "https://api.hbdm.vn/option-api/v1/option_transfer_limit?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "https",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"option-api",
						"v1",
						"option_transfer_limit"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "option_position_limit",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b77c8a1f-8723-4900-9d71-18193725c233",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"symbol\": \"btc\",\n    \"trade_partition\": \"usdt\"\n}"
				},
				"url": {
					"raw": "https://api.hbdm.vn/option-api/v1/option_position_limit?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "https",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"option-api",
						"v1",
						"option_position_limit"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "option_account_position_info",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b77c8a1f-8723-4900-9d71-18193725c233",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"symbol\": \"usdt\",\n    \"trade_partition\": \"usdt\"\n}"
				},
				"url": {
					"raw": "https://api.hbdm.vn/option-api/v1/option_account_position_info?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "https",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"option-api",
						"v1",
						"option_account_position_info"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "option_master_sub_transfer",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b77c8a1f-8723-4900-9d71-18193725c233",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"symbol\": \"usdt\",\n    \"trade_partition\": \"usdt\",\n    \"sub_uid\":1,\n    \"amount\":10,\n    \"type\":\"sub_to_master\"\n}"
				},
				"url": {
					"raw": "https://api.hbdm.vn/option-api/v1/option_master_sub_transfer?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "https",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"option-api",
						"v1",
						"option_master_sub_transfer"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "option_master_sub_transfer_record",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b77c8a1f-8723-4900-9d71-18193725c233",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"symbol\": \"usdt\",\n    \"trade_partition\": \"usdt\",\n    \"create_date\":10\n}"
				},
				"url": {
					"raw": "https://api.hbdm.vn/option-api/v1/option_master_sub_transfer_record?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "https",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"option-api",
						"v1",
						"option_master_sub_transfer_record"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "option_api_trading_status",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b77c8a1f-8723-4900-9d71-18193725c233",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://api.hbdm.vn/option-api/v1/option_api_trading_status?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "https",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"option-api",
						"v1",
						"option_api_trading_status"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "option_order",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b77c8a1f-8723-4900-9d71-18193725c233",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "\n{\n  \"contract_code\": \"BTC-USDT-201225-C-13000\",\n  \"price\": 1204.79,\n  \"volume\": 1,\n  \"direction\": \"buy\",\n  \"offset\": \"open\",\n  \"order_price_type\": \"post_only\"\n}\n"
				},
				"url": {
					"raw": "https://api.hbdm.vn/option-api/v1/option_order?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "https",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"option-api",
						"v1",
						"option_order"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "option_batchorder",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b77c8a1f-8723-4900-9d71-18193725c233",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "\n{\n  \"orders_data\": [\n    {\n      \"contract_code\": \"BTC-USDT-201225-C-13000\",\n      \"price\": 1120,\n      \"volume\": 1,\n      \"direction\": \"buy\",\n      \"offset\": \"open\",\n      \"order_price_type\": \"limit\"\n    },\n     {\n      \"contract_code\": \"BTC-USDT-201225-C-13000\",\n      \"price\": 1150,\n      \"volume\": 1,\n      \"direction\": \"buy\",\n      \"offset\": \"open\",\n      \"order_price_type\": \"post_only\"\n    }\n  ]\n}\n"
				},
				"url": {
					"raw": "https://api.hbdm.vn/option-api/v1/option_batchorder?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "https",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"option-api",
						"v1",
						"option_batchorder"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "option_cancel",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b77c8a1f-8723-4900-9d71-18193725c233",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "\n{\n  \"trade_partition\": \"usdt\",\n  \"order_id\": 771757367472893952\n}\n"
				},
				"url": {
					"raw": "https://api.hbdm.vn/option-api/v1/option_cancel?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "https",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"option-api",
						"v1",
						"option_cancel"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "option_cancelall",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b77c8a1f-8723-4900-9d71-18193725c233",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"symbol\": \"btc\",\n    \"contract_code\": \"BTC-USDT-201225-C-13000\"\n}"
				},
				"url": {
					"raw": "https://api.hbdm.vn/option-api/v1/option_cancelall?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "https",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"option-api",
						"v1",
						"option_cancelall"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "option_order_info",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b77c8a1f-8723-4900-9d71-18193725c233",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"symbol\": \"btc\",\n    \"order_id\": 771759332227493888\n}"
				},
				"url": {
					"raw": "https://api.hbdm.vn/option-api/v1/option_order_info?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "https",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"option-api",
						"v1",
						"option_order_info"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "option_order_detail",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b77c8a1f-8723-4900-9d71-18193725c233",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"symbol\": \"btc\",\n    \"order_id\": 771759332227493888\n}"
				},
				"url": {
					"raw": "https://api.hbdm.vn/option-api/v1/option_order_detail?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "https",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"option-api",
						"v1",
						"option_order_detail"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "option_openorders",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b77c8a1f-8723-4900-9d71-18193725c233",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"symbol\": \"btc\"\n}"
				},
				"url": {
					"raw": "https://api.hbdm.vn/option-api/v1/option_openorders?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "https",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"option-api",
						"v1",
						"option_openorders"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "option_hisorders",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b77c8a1f-8723-4900-9d71-18193725c233",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"symbol\": \"btc\",\n    \"trade_type\": 0,\n    \"type\": 1,\n    \"status\": 0,\n    \"create_date\": 10\n}"
				},
				"url": {
					"raw": "https://api.hbdm.vn/option-api/v1/option_hisorders?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "https",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"option-api",
						"v1",
						"option_hisorders"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "option_matchresults",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b77c8a1f-8723-4900-9d71-18193725c233",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"symbol\": \"btc\",\n    \"trade_type\": 0,\n    \"create_date\": 10\n}"
				},
				"url": {
					"raw": "https://api.hbdm.vn/option-api/v1/option_matchresults?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "https",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"option-api",
						"v1",
						"option_matchresults"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "option_lightning_close_position",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b77c8a1f-8723-4900-9d71-18193725c233",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"contract_code\": \"BTC-USDT-201225-C-13000\",\n    \"volume\": 1,\n    \"direction\": \"sell\"\n}"
				},
				"url": {
					"raw": "https://api.hbdm.vn/option-api/v1/option_lightning_close_position?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "https",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"option-api",
						"v1",
						"option_lightning_close_position"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "option_trigger_order",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b77c8a1f-8723-4900-9d71-18193725c233",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"contract_code\": \"BTC-USDT-201225-C-13000\",\n  \"trigger_type\": \"le\",\n  \"trigger_price\": \"100\",\n  \"order_price\": \"100\",\n  \"order_price_type\": \"limit\",\n  \"volume\": \"1\",\n  \"direction\": \"buy\",\n  \"offset\": \"open\"\n}"
				},
				"url": {
					"raw": "https://api.hbdm.vn/option-api/v1/option_trigger_order?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "https",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"option-api",
						"v1",
						"option_trigger_order"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "option_trigger_cancel",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b77c8a1f-8723-4900-9d71-18193725c233",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"symbol\": \"BTC\",\n  \"order_id\": \"771768525613305856,123\"\n}"
				},
				"url": {
					"raw": "https://api.hbdm.vn/option-api/v1/option_trigger_cancel?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "https",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"option-api",
						"v1",
						"option_trigger_cancel"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "option_trigger_cancelall",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b77c8a1f-8723-4900-9d71-18193725c233",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"symbol\": \"BTC\"\n}"
				},
				"url": {
					"raw": "https://api.hbdm.vn/option-api/v1/option_trigger_cancelall?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "https",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"option-api",
						"v1",
						"option_trigger_cancelall"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "option_trigger_openorders",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b77c8a1f-8723-4900-9d71-18193725c233",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"symbol\": \"BTC\"\n}"
				},
				"url": {
					"raw": "https://api.hbdm.vn/option-api/v1/option_trigger_openorders?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "https",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"option-api",
						"v1",
						"option_trigger_openorders"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "option_trigger_hisorders",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b77c8a1f-8723-4900-9d71-18193725c233",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"symbol\": \"BTC\",\n    \"trade_type\": 0,\n    \"status\": 0,\n    \"create_date\": 10\n}"
				},
				"url": {
					"raw": "https://api.hbdm.vn/option-api/v1/option_trigger_hisorders?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "https",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"option-api",
						"v1",
						"option_trigger_hisorders"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "transfer",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b77c8a1f-8723-4900-9d71-18193725c233",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"from\": \"option\",\n    \"to\": \"spot\",\n    \"tradePartition\": \"usdt\",\n    \"currency\": \"usdt\",\n    \"amount\": 10\n}"
				},
				"url": {
					"raw": "https://api.huobi.pro/v2/account/transfer?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "https",
					"host": [
						"api",
						"huobi",
						"pro"
					],
					"path": [
						"v2",
						"account",
						"transfer"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		}
	]
}