{
	"info": {
		"_postman_id": "25575d6e-800f-4ad4-8b91-098993cb0507",
		"name": "huobi_usdt_swap Copy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "swap_account_info",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f9d23a79-668f-4a31-bbb9-a98b6b7c936d",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_account_info?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_account_info"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_position_info",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f9d23a79-668f-4a31-bbb9-a98b6b7c936d",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "65744c4d-dc73-440a-a55b-ac2007e0bb21",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_position_info?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_position_info"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_account_position_info",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f9d23a79-668f-4a31-bbb9-a98b6b7c936d",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "65744c4d-dc73-440a-a55b-ac2007e0bb21",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"contract_code\": \"BTC-USDT\"}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_account_position_info?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_account_position_info"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_sub_account_list",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f9d23a79-668f-4a31-bbb9-a98b6b7c936d",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "65744c4d-dc73-440a-a55b-ac2007e0bb21",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"contract_code\": \"BTC-USDT\"}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_sub_account_list?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_sub_account_list"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_sub_account_info",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f9d23a79-668f-4a31-bbb9-a98b6b7c936d",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "65744c4d-dc73-440a-a55b-ac2007e0bb21",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"contract_code\": \"BTC-USDT\",\"sub_uid\": 114392453}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_sub_account_info?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_sub_account_info"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_sub_position_info",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f9d23a79-668f-4a31-bbb9-a98b6b7c936d",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "65744c4d-dc73-440a-a55b-ac2007e0bb21",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"contract_code\": \"BTC-USDT\",\"sub_uid\": 114392453}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_sub_position_info?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_sub_position_info"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_financial_record",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f9d23a79-668f-4a31-bbb9-a98b6b7c936d",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "65744c4d-dc73-440a-a55b-ac2007e0bb21",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"margin_account\": \"BTC-USDT\"}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_financial_record?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_financial_record"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_order_limit",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f9d23a79-668f-4a31-bbb9-a98b6b7c936d",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "65744c4d-dc73-440a-a55b-ac2007e0bb21",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"order_price_type\": \"limit\"}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_order_limit?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_order_limit"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_fee",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f9d23a79-668f-4a31-bbb9-a98b6b7c936d",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "65744c4d-dc73-440a-a55b-ac2007e0bb21",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_fee?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_fee"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_transfer_limit",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f9d23a79-668f-4a31-bbb9-a98b6b7c936d",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "65744c4d-dc73-440a-a55b-ac2007e0bb21",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"contract_code\": \"BTC-USDT\"}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_fee?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_fee"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_position_limit",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f9d23a79-668f-4a31-bbb9-a98b6b7c936d",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "65744c4d-dc73-440a-a55b-ac2007e0bb21",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_position_limit?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_position_limit"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_master_sub_transfer",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f9d23a79-668f-4a31-bbb9-a98b6b7c936d",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "65744c4d-dc73-440a-a55b-ac2007e0bb21",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"sub_uid\": 114392453,\n    \"asset\": \"USDT\",\n    \"from_margin_account\": \"BTC-USDT\",\n    \"to_margin_account\": \"BTC-USDT\",\n    \"amount\": 10,\n    \"type\": \"master_to_sub\"\n}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_master_sub_transfer?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_master_sub_transfer"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_master_sub_transfer_record",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f9d23a79-668f-4a31-bbb9-a98b6b7c936d",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "65744c4d-dc73-440a-a55b-ac2007e0bb21",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"margin_account\": \"BTC-USDT\",\n    \"transfer_type\": \"34\",\n    \"create_date\": 10\n}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_master_sub_transfer_record?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_master_sub_transfer_record"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_transfer_inner",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f9d23a79-668f-4a31-bbb9-a98b6b7c936d",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "65744c4d-dc73-440a-a55b-ac2007e0bb21",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"from_margin_account\": \"BTC-USDT\",\n    \"to_margin_account\": \"ETH-USDT\",\n    \"amount\": 10,\n    \"asset\": \"USDT\"\n}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_transfer_inner?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_transfer_inner"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_api_trading_status",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f9d23a79-668f-4a31-bbb9-a98b6b7c936d",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "65744c4d-dc73-440a-a55b-ac2007e0bb21",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_api_trading_status?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_api_trading_status"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_order",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f9d23a79-668f-4a31-bbb9-a98b6b7c936d",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"volume\": 5,\n    \"price\": 8000,\n    \"client_order_id\": 57012021022,\n    \"contract_code\": \"BTC-USDT\",\n    \"direction\": \"sell\",\n    \"offset\": \"open\",\n    \"order_price_type\": \"limit\",\n    \"lever_rate\": 1\n}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_order?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_order"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_batchorder",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f9d23a79-668f-4a31-bbb9-a98b6b7c936d",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"orders_data\": [\n        {\n            \"volume\": 1,\n            \"price\": 10329,\n            \"client_order_id\": 57012021024,\n            \"contract_code\": \"BTC-USDT\",\n            \"direction\": \"sell\",\n            \"offset\": \"open\",\n            \"order_price_type\": \"limit\",\n            \"lever_rate\": 1\n        }\n    ]\n}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_batchorder?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_batchorder"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_cancel",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f9d23a79-668f-4a31-bbb9-a98b6b7c936d",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"order_id\": \"758437106720993280\",\n\"contract_code\": \"BTC-USDT\"\n}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_cancel?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_cancel"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_cancelall",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f9d23a79-668f-4a31-bbb9-a98b6b7c936d",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"contract_code\": \"BTC-USDT\"}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_cancelall?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_cancelall"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_order_info",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f9d23a79-668f-4a31-bbb9-a98b6b7c936d",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"order_id\": \"758438520448905216\",\n    \"contract_code\": \"BTC-USDT\"\n}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_order_info?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_order_info"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_order_detail",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f9d23a79-668f-4a31-bbb9-a98b6b7c936d",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"order_id\": 758438520448905216,\n    \"contract_code\": \"BTC-USDT\",\n    \"created_at\": 1600866854727,\n    \"order_type\": 1\n}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_order_detail?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_order_detail"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_openorders",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f9d23a79-668f-4a31-bbb9-a98b6b7c936d",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"order_id\": 758438520448905216,\n    \"contract_code\": \"BTC-USDT\",\n    \"created_at\": 1600866854727,\n    \"order_type\": 1\n}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_openorders?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_openorders"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_hisorders",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f9d23a79-668f-4a31-bbb9-a98b6b7c936d",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"contract_code\": \"BTC-USDT\",\n    \"trade_type\": 0,\n    \"type\": 1,\n    \"status\": 0,\n    \"create_date\": 1,\n    \"page_index\": 1,\n    \"page_size\": 2\n}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_hisorders?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_hisorders"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_matchresults",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f9d23a79-668f-4a31-bbb9-a98b6b7c936d",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"contract_code\": \"BTC-USDT\",\n    \"trade_type\": 0,\n    \"create_date\": 1,\n    \"page_index\": 1,\n    \"page_size\": 2\n}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_matchresults?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_matchresults"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_lightning_close_position",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f9d23a79-668f-4a31-bbb9-a98b6b7c936d",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"contract_code\": \"BTC-USDT\",\n    \"volume\": 1,\n    \"direction\": \"buy\",\n    \"client_order_id\": 11\n}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_lightning_close_position?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_lightning_close_position"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_trigger_order",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f9d23a79-668f-4a31-bbb9-a98b6b7c936d",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"contract_code\": \"BTC-USDT\",\n    \"trigger_type\": \"ge\",\n    \"trigger_price\": 10387,\n    \"order_price\": 10367,\n    \"order_price_type\": \"limit\",\n    \"volume\": 1,\n    \"direction\": \"buy\",\n    \"offset\": \"open\",\n    \"lever_rate\": 1\n}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_trigger_order?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_trigger_order"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_trigger_cancel",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f9d23a79-668f-4a31-bbb9-a98b6b7c936d",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"contract_code\": \"BTC-USDT\",\n\t\"order_id\": \"34,1\"\n}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_trigger_cancel?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_trigger_cancel"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_trigger_cancelall",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f9d23a79-668f-4a31-bbb9-a98b6b7c936d",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"contract_code\": \"BTC-USDT\"\n}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_trigger_cancelall?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_trigger_cancelall"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_trigger_openorders",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f9d23a79-668f-4a31-bbb9-a98b6b7c936d",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"contract_code\": \"BTC-USDT\"\n}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_trigger_cancelall?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_trigger_cancelall"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_trigger_hisorders",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f9d23a79-668f-4a31-bbb9-a98b6b7c936d",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"contract_code\": \"BTC-USDT\",\n    \"trade_type\": 0,\n    \"status\": \"0\",\n    \"create_date\": 1\n}"
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_trigger_hisorders?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_trigger_hisorders"
					],
					"query": [
						{
							"key": "AccessKeyId",
							"value": "{{accessKey}}"
						},
						{
							"key": "SignatureVersion",
							"value": "{{signatureVersion}}"
						},
						{
							"key": "SignatureMethod",
							"value": "{{signatureMethod}}"
						},
						{
							"key": "Timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "Signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_index",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f9d23a79-668f-4a31-bbb9-a98b6b7c936d",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_index",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_index"
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_contract_info",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f9d23a79-668f-4a31-bbb9-a98b6b7c936d",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_contract_info?contract_code=BTC-USDT",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_contract_info"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_price_limit",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f9d23a79-668f-4a31-bbb9-a98b6b7c936d",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_price_limit?contract_code=BTC-USDT",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_price_limit"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_open_interest",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f9d23a79-668f-4a31-bbb9-a98b6b7c936d",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_open_interest?contract_code=BTC-USDT",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_open_interest"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "market depth",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f9d23a79-668f-4a31-bbb9-a98b6b7c936d",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-ex/market/depth?contract_code=BTC-USDT&type=step0",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-ex",
						"market",
						"depth"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT"
						},
						{
							"key": "type",
							"value": "step0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "klines",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f9d23a79-668f-4a31-bbb9-a98b6b7c936d",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-ex/market/history/kline?contract_code=BTC-USDT&period=1day&size=2",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-ex",
						"market",
						"history",
						"kline"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT"
						},
						{
							"key": "period",
							"value": "1day"
						},
						{
							"key": "size",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "market merged data",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f9d23a79-668f-4a31-bbb9-a98b6b7c936d",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-ex/market/detail/merged?contract_code=BTC-USDT",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-ex",
						"market",
						"detail",
						"merged"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "market trade",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f9d23a79-668f-4a31-bbb9-a98b6b7c936d",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-ex/market/trade?contract_code=BTC-USDT",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-ex",
						"market",
						"trade"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_risk_info",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f9d23a79-668f-4a31-bbb9-a98b6b7c936d",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_risk_info?contract_code=BTC-USDT",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_risk_info"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_insurance_fund",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f9d23a79-668f-4a31-bbb9-a98b6b7c936d",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_insurance_fund?contract_code=BTC-USDT",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_insurance_fund"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_swap_adjustfactor",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f9d23a79-668f-4a31-bbb9-a98b6b7c936d",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_adjustfactor?contract_code=BTC-USDT",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_adjustfactor"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_his_open_interest",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f9d23a79-668f-4a31-bbb9-a98b6b7c936d",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_his_open_interest?contract_code=BTC-USDT&period=60min&amount_type=1",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_his_open_interest"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT"
						},
						{
							"key": "period",
							"value": "60min"
						},
						{
							"key": "amount_type",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_elite_account_ratio",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f9d23a79-668f-4a31-bbb9-a98b6b7c936d",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_elite_account_ratio?contract_code=BTC-USDT&period=60min&amount_type=1",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_elite_account_ratio"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT"
						},
						{
							"key": "period",
							"value": "60min"
						},
						{
							"key": "amount_type",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_elite_position_ratio",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f9d23a79-668f-4a31-bbb9-a98b6b7c936d",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_elite_position_ratio?contract_code=BTC-USDT&period=60min",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_elite_position_ratio"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT"
						},
						{
							"key": "period",
							"value": "60min"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_api_state",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f9d23a79-668f-4a31-bbb9-a98b6b7c936d",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_api_state",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_api_state"
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_funding_rate",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f9d23a79-668f-4a31-bbb9-a98b6b7c936d",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_funding_rate?contract_code=BTC-USDT",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_funding_rate"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_historical_funding_rate",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f9d23a79-668f-4a31-bbb9-a98b6b7c936d",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_historical_funding_rate?contract_code=BTC-USDT",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_historical_funding_rate"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "swap_liquidation_orders",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f9d23a79-668f-4a31-bbb9-a98b6b7c936d",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/linear-swap-api/v1/swap_liquidation_orders?contract_code=BTC-USDT&trade_type=0&create_date=90",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"linear-swap-api",
						"v1",
						"swap_liquidation_orders"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT"
						},
						{
							"key": "trade_type",
							"value": "0"
						},
						{
							"key": "create_date",
							"value": "90"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "linear_swap_premium_index_kline",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f9d23a79-668f-4a31-bbb9-a98b6b7c936d",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/index/market/history/linear_swap_premium_index_kline?contract_code=BTC-USDT&period=1min&size=10",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"index",
						"market",
						"history",
						"linear_swap_premium_index_kline"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT"
						},
						{
							"key": "period",
							"value": "1min"
						},
						{
							"key": "size",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "linear_swap_estimated_rate_kline",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f9d23a79-668f-4a31-bbb9-a98b6b7c936d",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/index/market/history/linear_swap_estimated_rate_kline?contract_code=BTC-USDT&period=1min&size=10",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"index",
						"market",
						"history",
						"linear_swap_estimated_rate_kline"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT"
						},
						{
							"key": "period",
							"value": "1min"
						},
						{
							"key": "size",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "linear_swap_basis",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f9d23a79-668f-4a31-bbb9-a98b6b7c936d",
						"exec": [
							"// Get API Key from environment variable",
							"var accessKey = pm.environment.get(\"accessKey\");",
							"var secretKey = pm.environment.get(\"secretKey\");",
							"",
							"var signatureVersion = 2;",
							"var signatureMethod = \"HmacSHA256\";",
							"var timestamp = new Date().toISOString().slice(0, 19);",
							"",
							"// Get request detail form postman",
							"var requestMethod = pm.request.method;",
							"var queryParam = pm.request.url.query.members;",
							"var host = pm.request.url.host.join(\".\");",
							"var path = \"/\"+pm.request.url.path.join(\"/\");",
							"",
							"var queryList = {",
							"    values: [],",
							"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
							"    put: function(k, v){",
							"        var index = -1;",
							"        for(var i = 0;i<this.values.length;i++){",
							"            var key = this.values[i].split(\"=\")[0];",
							"            ",
							"            if(key==k){",
							"                index = -1;",
							"                break;",
							"            }",
							"        }",
							"        var value = encodeURIComponent(v);",
							"        if(index==-1){",
							"            this.values.push(k+\"=\"+value);",
							"        }else{",
							"            this.values[index] = k+\"=\"+value;",
							"        }",
							"    },",
							"    sortedValues: function(){",
							"        return this.values.sort();",
							"    },",
							"    inSigkey: function(k){",
							"        for(var i = 0; i<this.sigkey.length; i++){",
							"            if(k == this.sigkey[i]){",
							"                return true;",
							"            }",
							"        }",
							"        return false",
							"    }",
							"};",
							"",
							"for(var i = 0;i<queryParam.length;i++){",
							"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
							"        continue;",
							"    queryList.put(queryParam[i].key, queryParam[i].value);",
							"}",
							"queryList.put(\"Timestamp\",timestamp);",
							"queryList.put(\"AccessKeyId\",accessKey);",
							"queryList.put(\"SignatureMethod\",signatureMethod);",
							"queryList.put(\"SignatureVersion\",signatureVersion);",
							"    ",
							"var payload = requestMethod.toUpperCase()+\"\\n\"+",
							"            host.toLowerCase()+\"\\n\"+",
							"            path+\"\\n\"+",
							"            queryList.sortedValues().join(\"&\");",
							"            ",
							"console.log(payload);",
							"",
							"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
							"",
							"pm.environment.set(\"accessKey\", accessKey);",
							"pm.environment.set(\"signatureVersion\", signatureVersion);",
							"pm.environment.set(\"signatureMethod\", signatureMethod);",
							"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
							"pm.environment.set(\"signature\", encodeURIComponent(signature));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://api.hbdm.vn/index/market/history/linear_swap_basis?contract_code=BTC-USDT&period=1min&size=2",
					"protocol": "http",
					"host": [
						"api",
						"hbdm",
						"vn"
					],
					"path": [
						"index",
						"market",
						"history",
						"linear_swap_basis"
					],
					"query": [
						{
							"key": "contract_code",
							"value": "BTC-USDT"
						},
						{
							"key": "period",
							"value": "1min"
						},
						{
							"key": "size",
							"value": "2"
						}
					]
				}
			},
			"response": []
		}
	]
}