{
	"info": {
		"_postman_id": "eeb0e968-f956-46f6-adee-cbc44e4ff1dd",
		"name": "huobi_spot",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "基础信息",
			"item": [
				{
					"name": "market-status",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{hostName}}/v2/market-status",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v2",
								"market-status"
							]
						}
					},
					"response": []
				},
				{
					"name": "symbols",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{hostName}}/v1/common/symbols",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v1",
								"common",
								"symbols"
							]
						}
					},
					"response": []
				},
				{
					"name": "currencys",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{hostName}}/v1/common/currencys",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v1",
								"common",
								"currencys"
							]
						}
					},
					"response": []
				},
				{
					"name": "currencies",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{hostName}}/v2/reference/currencies?currency=usdt",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v2",
								"reference",
								"currencies"
							],
							"query": [
								{
									"key": "currency",
									"value": "usdt"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "timestamp",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{hostName}}/v1/common/timestamp",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v1",
								"common",
								"timestamp"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "行情数据",
			"item": [
				{
					"name": "kline",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{hostName}}/market/history/kline?symbol=btcusdt&period=5min&aize=10",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"market",
								"history",
								"kline"
							],
							"query": [
								{
									"key": "symbol",
									"value": "btcusdt"
								},
								{
									"key": "period",
									"value": "5min"
								},
								{
									"key": "aize",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "detail merged",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{hostName}}/market/detail/merged?symbol=btcusdt",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"market",
								"detail",
								"merged"
							],
							"query": [
								{
									"key": "symbol",
									"value": "btcusdt"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "market tickers",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{hostName}}/market/tickers",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"market",
								"tickers"
							]
						}
					},
					"response": []
				},
				{
					"name": "market depth",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{hostName}}/market/depth?symbol=btcusdt&depth=5&type=step0",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"market",
								"depth"
							],
							"query": [
								{
									"key": "symbol",
									"value": "btcusdt"
								},
								{
									"key": "depth",
									"value": "5"
								},
								{
									"key": "type",
									"value": "step0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "market trade",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{hostName}}/market/trade?symbol=btcusdt",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"market",
								"trade"
							],
							"query": [
								{
									"key": "symbol",
									"value": "btcusdt"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "market history trade",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{hostName}}/market/history/trade?symbol=btcusdt&depth=5&type=step0",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"market",
								"history",
								"trade"
							],
							"query": [
								{
									"key": "symbol",
									"value": "btcusdt"
								},
								{
									"key": "depth",
									"value": "5"
								},
								{
									"key": "type",
									"value": "step0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "market detail",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{hostName}}/market/detail?symbol=btcusdt",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"market",
								"detail"
							],
							"query": [
								{
									"key": "symbol",
									"value": "btcusdt"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "market etp",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{hostName}}/market/etp?symbol=btc3lusdt",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"market",
								"etp"
							],
							"query": [
								{
									"key": "symbol",
									"value": "btc3lusdt"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "账户相关",
			"item": [
				{
					"name": "account accounts",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{hostName}}/v1/account/accounts?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v1",
								"account",
								"accounts"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "accounts/{account-id}/balance",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"account-id\":\"13496526\"}"
						},
						"url": {
							"raw": "{{hostName}}/v1/account/accounts/1349626/balance?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v1",
								"account",
								"accounts",
								"1349626",
								"balance"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "account asset-valuation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{hostName}}/v2/account/asset-valuation?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}&accountType=spot&valuationCurrency=CNY",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v2",
								"account",
								"asset-valuation"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								},
								{
									"key": "accountType",
									"value": "spot"
								},
								{
									"key": "valuationCurrency",
									"value": "CNY"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "account transfer",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"from-user\": 112233,\n    \"from-account-type\": \"spot\",\n    \"from-account\": 113366,\n    \"to-user\": 112233,\n    \"to-account-type\":\"otc\",\n    \"to-account\":121212,\n    \"currency\":\"usdt\",\n    \"amount\":\"100\"\n}"
						},
						"url": {
							"raw": "https://{{hostName}}/v1/account/transfer?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v1",
								"account",
								"transfer"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "account history",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{hostName}}/v1/account/history?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}&account-id=112233",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v1",
								"account",
								"history"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								},
								{
									"key": "account-id",
									"value": "112233"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "account ledger",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{hostName}}/v2/account/ledger?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}&accountId=112233",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v2",
								"account",
								"ledger"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								},
								{
									"key": "accountId",
									"value": "112233"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "futures transfer",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"currency\": \"btc\",\n    \"type\": \"futures-to-pro\",\n    \"amount\": 1\n}"
						},
						"url": {
							"raw": "{{hostName}}/v1/futures/transfer?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v1",
								"futures",
								"transfer"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "point account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{hostName}}/v2/point/account?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}&subUid=123456789",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v2",
								"point",
								"account"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								},
								{
									"key": "subUid",
									"value": "123456789"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "point transfer",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"fromUid\": \"123456789\",\n    \"toUid\": \"12345678\",\n    \"groupId\": 5194533,\n    \"amount\": \"10\"\n}"
						},
						"url": {
							"raw": "https://{{hostName}}/v2/point/transfer?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v2",
								"point",
								"transfer"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "钱包",
			"item": [
				{
					"name": "deposit address",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{hostName}}/v2/account/deposit/address?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}&currency=usdt",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v2",
								"account",
								"deposit",
								"address"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								},
								{
									"key": "currency",
									"value": "usdt"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "account withdraw quota",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{hostName}}/v2/account/withdraw/quota?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}&currency=usdt",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v2",
								"account",
								"withdraw",
								"quota"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								},
								{
									"key": "currency",
									"value": "usdt"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "account withdraw address",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{hostName}}/v2/account/withdraw/address?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}&currency=usdt",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v2",
								"account",
								"withdraw",
								"address"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								},
								{
									"key": "currency",
									"value": "usdt"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "withdraw api create",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address\": \"XXOOXXXXXX-XX\",\n    \"amount\": \"2\",\n    \"currency\": \"usdt\",\n    \"fee\": \"0\",\n    \"chain\": \"trc20usdt\"\n}"
						},
						"url": {
							"raw": "https://{{hostName}}/v1/dw/withdraw/api/create?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v1",
								"dw",
								"withdraw",
								"api",
								"create"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "withdraw-virtual/{withdraw-id}/cancel",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostName}}/v1/dw/withdraw-virtual/{withdraw-id}/cancel?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v1",
								"dw",
								"withdraw-virtual",
								"{withdraw-id}",
								"cancel"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deposit-withdraw",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{hostName}}/v1/query/deposit-withdraw?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}&currency=usdt&type=deposit",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v1",
								"query",
								"deposit-withdraw"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								},
								{
									"key": "currency",
									"value": "usdt"
								},
								{
									"key": "type",
									"value": "deposit"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "子用户管理",
			"item": [
				{
					"name": "sub-user deduct-mode",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"subUids\": \"112233\",\n    \"deductMode\": \"master\"\n}"
						},
						"url": {
							"raw": "https://{{hostName}}/v2/sub-user/deduct-mode?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v2",
								"sub-user",
								"deduct-mode"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "user api-key",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{hostName}}/v2/user/api-key?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}&uid=112233",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v2",
								"user",
								"api-key"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								},
								{
									"key": "uid",
									"value": "112233"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "user uid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{hostName}}/v2/user/uid?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v2",
								"user",
								"uid"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "sub-user creation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userList\": [\n        {\n            \"userName\": \"test0821\",\n            \"note\": \"测试币币子账户1\"\n        },\n        {\n            \"userName\": \"test0818\",\n            \"note\": \"测试币币子账户2\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "https://{{hostName}}/v2/sub-user/creation?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v2",
								"sub-user",
								"creation"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "sub-user user-list",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostName}}/v2/sub-user/user-list?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v2",
								"sub-user",
								"user-list"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "sub-user management",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"subUid\": \"112233\",\n    \"action\": \"lock\"\n}"
						},
						"url": {
							"raw": "https://{{hostName}}/v2/sub-user/management?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v2",
								"sub-user",
								"management"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "sub-user user-state",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostName}}/v2/sub-user/user-state?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}&subUid=112233",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v2",
								"sub-user",
								"user-state"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								},
								{
									"key": "subUid",
									"value": "112233"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "sub-user tradable-market",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"subUids\": \"112233\",\n    \"accountType\": \"isolated-margin\",\n    \"activation\": \"activated\"\n}"
						},
						"url": {
							"raw": "https://{{hostName}}/v2/sub-user/tradable-market?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v2",
								"sub-user",
								"tradable-market"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "sub-user transferability",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"subUids\": \"112233\",\n    \"accountType\": \"spot\",\n    \"transferrable\": \"true\"\n}"
						},
						"url": {
							"raw": "https://{{hostName}}/v2/sub-user/transferability?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v2",
								"sub-user",
								"transferability"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "sub-user account-list",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostName}}/v2/sub-user/account-list?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}&subUid=112233",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v2",
								"sub-user",
								"account-list"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								},
								{
									"key": "subUid",
									"value": "112233"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "sub-user api-key-generation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"otpToken\": \"1122333\",\n    \"note\": \"子账户\",\n    \"permission\": \"readOnly\",\n    \"ipAddresses\": \"\",\n    \"subUid\":112233\n}"
						},
						"url": {
							"raw": "https://{{hostName}}/v2/sub-user/api-key-generation?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v2",
								"sub-user",
								"api-key-generation"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "sub-user api-key-modification",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"accessKey\": \"XXAA-XXOO-XX\",\n    \"note\": \"子账户\",\n    \"permission\": \"readOnly,trade\",\n    \"ipAddresses\": \"\",\n    \"subUid\":112233\n}"
						},
						"url": {
							"raw": "https://{{hostName}}/v2/sub-user/api-key-modification?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v2",
								"sub-user",
								"api-key-modification"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "sub-user api-key-deletion",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"accessKey\": \"XXXXX-XXX-XXX\",\n    \"subUid\":112233\n}"
						},
						"url": {
							"raw": "https://{{hostName}}/v2/sub-user/api-key-deletion?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v2",
								"sub-user",
								"api-key-deletion"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "subuser transfer",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"currency\": \"usdt\",\n    \"sub-uid\":112233,\n    \"amount\":1,\n    \"client-order-id\":1223222,\n    \"type\":\"master-transfer-in\"\n}"
						},
						"url": {
							"raw": "https://{{hostName}}/v1/subuser/transfer?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v1",
								"subuser",
								"transfer"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "sub-user deposit-address",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostName}}/v2/sub-user/deposit-address?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}&subUid=112233&currency=usdt",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v2",
								"sub-user",
								"deposit-address"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								},
								{
									"key": "subUid",
									"value": "112233"
								},
								{
									"key": "currency",
									"value": "usdt"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "subuser aggregate-balance",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostName}}/v1/subuser/aggregate-balance?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v1",
								"subuser",
								"aggregate-balance"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "sub-user query-deposit",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostName}}/v2/sub-user/query-deposit?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}&subUid=112233&currency=usdt",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v2",
								"sub-user",
								"query-deposit"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								},
								{
									"key": "subUid",
									"value": "112233"
								},
								{
									"key": "currency",
									"value": "usdt"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "account accounts/{sub-uid}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostName}}/v1/account/accounts/112233?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v1",
								"account",
								"accounts",
								"112233"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "现货/杠杆交易",
			"item": [
				{
					"name": "order orders place",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"account-id\": \"112233\",\n    \"symbol\": \"htusdt\",\n    \"type\": \"buy-limit\",\n    \"amount\": \"1\",\n    \"price\": \"5\",\n    \"source\": \"spot-api\",\n    \"client-order-id\":\"123\"\n}"
						},
						"url": {
							"raw": "https://{{hostName}}/v1/order/orders/place?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v1",
								"order",
								"orders",
								"place"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "order batch-orders",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[{\n    \"account-id\": \"112233\",\n    \"symbol\": \"htusdt\",\n    \"type\": \"buy-limit\",\n    \"amount\": \"1\",\n    \"price\": \"5\",\n    \"source\": \"spot-api\"\n}]"
						},
						"url": {
							"raw": "https://{{hostName}}/v1/order/batch-orders?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v1",
								"order",
								"batch-orders"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "order/orders/{order-id}/submitcancel",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": \"267330513701709\"\n}"
						},
						"url": {
							"raw": "https://{{hostName}}/v1/order/orders/267330513701709/submitcancel?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v1",
								"order",
								"orders",
								"267330513701709",
								"submitcancel"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "order/orders/submitCancelClientOrder",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"client-order-id\": \"123\"\n}"
						},
						"url": {
							"raw": "https://{{hostName}}/v1/order/orders/submitCancelClientOrder?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v1",
								"order",
								"orders",
								"submitCancelClientOrder"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "algo-orders/cancel-all-after",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"timeout\": \"100\"\n}"
						},
						"url": {
							"raw": "https://{{hostName}}/v2/algo-orders/cancel-all-after?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v2",
								"algo-orders",
								"cancel-all-after"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "order openOrders",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostName}}/v1/order/openOrders?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}&account-id=112233&symbol=htusdt",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v1",
								"order",
								"openOrders"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								},
								{
									"key": "account-id",
									"value": "112233"
								},
								{
									"key": "symbol",
									"value": "htusdt"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "order orders batchCancelOpenOrders",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"account-id\": \"112233\",\n    \"symbol\": \"htusdt\"\n}"
						},
						"url": {
							"raw": "https://{{hostName}}/v1/order/orders/batchCancelOpenOrders?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v1",
								"order",
								"orders",
								"batchCancelOpenOrders"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "order orders batchcancel",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"client-order-ids\": [\"12345\",\"6\"]\n}"
						},
						"url": {
							"raw": "https://{{hostName}}/v1/order/orders/batchcancel?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v1",
								"order",
								"orders",
								"batchcancel"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "order orders/{order-id}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostName}}/v1/order/orders/272246927899427?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v1",
								"order",
								"orders",
								"272246927899427"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "order orders getClientOrder",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostName}}/v1/order/orders/getClientOrder?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}&clientOrderId=12345",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v1",
								"order",
								"orders",
								"getClientOrder"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								},
								{
									"key": "clientOrderId",
									"value": "12345"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "orders/{order-id}/matchresults",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostName}}/v1/order/orders/272252061555706/matchresults?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v1",
								"order",
								"orders",
								"272252061555706",
								"matchresults"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "order orders",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostName}}/v1/order/orders?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}&symbol=shibusdt&states=created,submitted,partial-filled,filled,partial-canceled,canceling,canceled",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v1",
								"order",
								"orders"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								},
								{
									"key": "symbol",
									"value": "shibusdt"
								},
								{
									"key": "states",
									"value": "created,submitted,partial-filled,filled,partial-canceled,canceling,canceled"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "order history",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostName}}/v1/order/history?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v1",
								"order",
								"history"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "order matchresults",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostName}}/v1/order/matchresults?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}&symbol=shibusdt",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v1",
								"order",
								"matchresults"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								},
								{
									"key": "symbol",
									"value": "shibusdt"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "reference transact-fee-rate",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostName}}/v1/order/matchresults?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}&symbol=shibusdt",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v1",
								"order",
								"matchresults"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								},
								{
									"key": "symbol",
									"value": "shibusdt"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "策略委托下单",
			"item": [
				{
					"name": "algo-orders",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"accountId\": \"112233\",\n    \"symbol\": \"trxusdt\",\n    \"orderPrice\": \"0.1\",\n    \"orderSide\": \"buy\",\n    \"orderSize\": \"100\",\n    \"orderValue\": \"\",\n    \"timeInForce\": \"\",\n    \"orderType\": \"limit\",\n    \"clientOrderId\": \"1234456\",\n    \"stopPrice\": \"0.1\",\n    \"trailingRate\": \"\"\n}"
						},
						"url": {
							"raw": "https://{{hostName}}/v2/algo-orders?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v2",
								"algo-orders"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "algo-orders cancellation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"clientOrderIds\": [\n        \"123445\"\n    ]\n}"
						},
						"url": {
							"raw": "https://{{hostName}}/v2/algo-orders/cancellation?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v2",
								"algo-orders",
								"cancellation"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "algo-orders opening",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostName}}/v2/algo-orders/opening?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}&accountId=112233&symbol=trxusdt",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v2",
								"algo-orders",
								"opening"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								},
								{
									"key": "accountId",
									"value": "112233"
								},
								{
									"key": "symbol",
									"value": "trxusdt"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "algo-orders history",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostName}}/v2/algo-orders/history?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}&accountId=112233&symbol=trxusdt&orderStatus=canceled",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v2",
								"algo-orders",
								"history"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								},
								{
									"key": "accountId",
									"value": "112233"
								},
								{
									"key": "symbol",
									"value": "trxusdt"
								},
								{
									"key": "orderStatus",
									"value": "canceled"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "algo-orders specific",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostName}}/v2/algo-orders/specific?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}&clientOrderId=123445",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v2",
								"algo-orders",
								"specific"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								},
								{
									"key": "clientOrderId",
									"value": "123445"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "借币(逐仓/全仓杠杆)",
			"item": [
				{
					"name": "account repayment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"accountId\": \"112233\",\n    \"currency\": \"usdt\",\n    \"amount\": \"1\",\n    \"transactId\": \"\"\n}"
						},
						"url": {
							"raw": "https://{{hostName}}/v2/account/repayment?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v2",
								"account",
								"repayment"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "transfer-in margin",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"symbol\": \"btcusdt\",\n    \"currency\": \"usdt\",\n    \"amount\": \"100\"\n}"
						},
						"url": {
							"raw": "https://{{hostName}}/v1/dw/transfer-in/margin?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v1",
								"dw",
								"transfer-in",
								"margin"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "transfer-out margin",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"symbol\": \"btcusdt\",\n    \"currency\": \"usdt\",\n    \"amount\": \"100\"\n}"
						},
						"url": {
							"raw": "https://{{hostName}}/v1/dw/transfer-out/margin?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v1",
								"dw",
								"transfer-out",
								"margin"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "margin loan-info",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostName}}/v1/margin/loan-info?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}&symbols=btcusdt",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v1",
								"margin",
								"loan-info"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								},
								{
									"key": "symbols",
									"value": "btcusdt"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "margin orders",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"symbol\": \"btcusdt\",\n    \"currency\": \"usdt\",\n    \"amount\": \"100\"\n}"
						},
						"url": {
							"raw": "https://{{hostName}}/v1/margin/orders?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v1",
								"margin",
								"orders"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "margin/orders/{order-id}/repay",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amount\": \"100\"\n}"
						},
						"url": {
							"raw": "https://{{hostName}}/v1/margin/orders/14851087/repay?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v1",
								"margin",
								"orders",
								"14851087",
								"repay"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "margin loan-orders",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amount\": \"100\"\n}"
						},
						"url": {
							"raw": "https://{{hostName}}/v1/margin/loan-orders?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}&symbol=btcusdt",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v1",
								"margin",
								"loan-orders"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								},
								{
									"key": "symbol",
									"value": "btcusdt"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "margin accounts balance",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amount\": \"100\"\n}"
						},
						"url": {
							"raw": "https://{{hostName}}/v1/margin/accounts/balance?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}&symbol=btcusdt",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v1",
								"margin",
								"accounts",
								"balance"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								},
								{
									"key": "symbol",
									"value": "btcusdt"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "cross-margin transfer-in",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"currency\":\"usdt\",\n    \"amount\": \"1\"\n}"
						},
						"url": {
							"raw": "https://{{hostName}}/v1/cross-margin/transfer-in?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v1",
								"cross-margin",
								"transfer-in"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "cross-margin transfer-out",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"currency\":\"usdt\",\n    \"amount\": \"1\"\n}"
						},
						"url": {
							"raw": "https://{{hostName}}/v1/cross-margin/transfer-out?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v1",
								"cross-margin",
								"transfer-out"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "cross-margin loan-info",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"currency\":\"usdt\",\n    \"amount\": \"1\"\n}"
						},
						"url": {
							"raw": "https://{{hostName}}/v1/cross-margin/loan-info?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v1",
								"cross-margin",
								"loan-info"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "cross-margin orders",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"currency\":\"usdt\",\n    \"amount\": \"100\"\n}"
						},
						"url": {
							"raw": "https://{{hostName}}/v1/cross-margin/orders?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v1",
								"cross-margin",
								"orders"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "cross-margin/orders/{order-id}/repay",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amount\": \"100\"\n}"
						},
						"url": {
							"raw": "https://{{hostName}}/v1/cross-margin/orders/2423437/repay?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v1",
								"cross-margin",
								"orders",
								"2423437",
								"repay"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "cross-margin loan-orders",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostName}}/v1/cross-margin/loan-orders?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}&state=cleared",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v1",
								"cross-margin",
								"loan-orders"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								},
								{
									"key": "state",
									"value": "cleared"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "cross-margin/accounts/balance",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostName}}/v1/cross-margin/accounts/balance?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}&state=cleared",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v1",
								"cross-margin",
								"accounts",
								"balance"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								},
								{
									"key": "state",
									"value": "cleared"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "account repayment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostName}}/v1/cross-margin/accounts/balance?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}&state=cleared",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v1",
								"cross-margin",
								"accounts",
								"balance"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								},
								{
									"key": "state",
									"value": "cleared"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "杠杆ETP",
			"item": [
				{
					"name": "etp reference",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostName}}/v2/etp/reference?etpName=btc3s",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v2",
								"etp",
								"reference"
							],
							"query": [
								{
									"key": "etpName",
									"value": "btc3s"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "etp creation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"etpName\": \"btc3l\",\n    \"value\": 100,\n    \"currency\": \"usdt\"\n}"
						},
						"url": {
							"raw": "https://{{hostName}}/v2/etp/creation?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v2",
								"etp",
								"creation"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "etp redemption",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"etpName\": \"btc3l\",\n    \"amount\": 1.1733,\n    \"currency\": \"usdt\"\n}"
						},
						"url": {
							"raw": "https://{{hostName}}/v2/etp/redemption?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v2",
								"etp",
								"redemption"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "etp transactions",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostName}}/v2/etp/transactions?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}&etpNames=btc3l&transactTypes=creation",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v2",
								"etp",
								"transactions"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								},
								{
									"key": "etpNames",
									"value": "btc3l"
								},
								{
									"key": "transactTypes",
									"value": "creation"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "etp transaction",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostName}}/v2/etp/transaction?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}&transactId=9054329",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v2",
								"etp",
								"transaction"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								},
								{
									"key": "transactId",
									"value": "9054329"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "etp rebalance",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostName}}/v2/etp/rebalance?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}&symbol=btc3lusdt",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v2",
								"etp",
								"rebalance"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								},
								{
									"key": "symbol",
									"value": "btc3lusdt"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "etp/{transactId}/cancel",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostName}}/v2/etp/{transactId}/cancel?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v2",
								"etp",
								"{transactId}",
								"cancel"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "etp batch-cancel",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"transactId\": \"\"\n}"
						},
						"url": {
							"raw": "https://{{hostName}}/v2/etp/batch-cancel?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v2",
								"etp",
								"batch-cancel"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "etp limit",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get API Key from environment variable",
									"var accessKey = pm.environment.get(\"accessKey\");",
									"var secretKey = pm.environment.get(\"secretKey\");",
									"var url=pm.environment.get(\"hostName\");",
									"",
									"var signatureVersion = 2;",
									"var signatureMethod = \"HmacSHA256\";",
									"var timestamp = new Date().toISOString().slice(0, 19);",
									"",
									"// Get request detail form postman",
									"var requestMethod = pm.request.method;",
									"var queryParam = pm.request.url.query.members;",
									"if(url!=null){",
									"    var host=url;",
									"    console.log(host);",
									"}else{",
									"    var host = pm.request.url.host.join(\".\");",
									"    console.log(host);",
									"}",
									"var path = \"/\"+pm.request.url.path.join(\"/\");",
									"",
									"var queryList = {",
									"    values: [],",
									"    sigkey: [\"AccessKeyId\", \"SignatureVersion\", \"SignatureMethod\", \"Timestamp\", \"Signature\"],",
									"    put: function(k, v){",
									"        var index = -1;",
									"        for(var i = 0;i<this.values.length;i++){",
									"            var key = this.values[i].split(\"=\")[0];",
									"",
									"            if(key==k){",
									"                index = -1;",
									"                break;",
									"            }",
									"        }",
									"        var value = encodeURIComponent(v);",
									"        if(index==-1){",
									"            this.values.push(k+\"=\"+value);",
									"        }else{",
									"            this.values[index] = k+\"=\"+value;",
									"        }",
									"    },",
									"    sortedValues: function(){",
									"        return this.values.sort();",
									"    },",
									"    inSigkey: function(k){",
									"        for(var i = 0; i<this.sigkey.length; i++){",
									"            if(k == this.sigkey[i]){",
									"                return true;",
									"            }",
									"        }",
									"        return false",
									"    }",
									"};",
									"",
									"for(var i = 0;i<queryParam.length;i++){",
									"    if(queryParam[i].disabled||queryList.inSigkey(queryParam[i].key))",
									"        continue;",
									"    queryList.put(queryParam[i].key, queryParam[i].value);",
									"}",
									"",
									"queryList.put(\"Timestamp\",timestamp);",
									"queryList.put(\"AccessKeyId\",accessKey);",
									"queryList.put(\"SignatureMethod\",signatureMethod);",
									"queryList.put(\"SignatureVersion\",signatureVersion);",
									"",
									"var payload = requestMethod.toUpperCase()+\"\\n\"+",
									"            host.toLowerCase()+\"\\n\"+",
									"            path+\"\\n\"+",
									"            queryList.sortedValues().join(\"&\");",
									"            ",
									"console.log(payload);",
									"",
									"",
									"var signatureBytes = CryptoJS.HmacSHA256(payload, secretKey);",
									"var signature = CryptoJS.enc.Base64.stringify(signatureBytes);",
									"",
									"pm.environment.set(\"accessKey\", accessKey);",
									"pm.environment.set(\"signatureVersion\", signatureVersion);",
									"pm.environment.set(\"signatureMethod\", signatureMethod);",
									"pm.environment.set(\"timestamp\", encodeURIComponent(timestamp));",
									"pm.environment.set(\"signature\", encodeURIComponent(signature));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"transactId\": \"\"\n}"
						},
						"url": {
							"raw": "https://{{hostName}}/v2/etp/limit?AccessKeyId={{accessKey}}&SignatureVersion={{signatureVersion}}&SignatureMethod={{signatureMethod}}&Timestamp={{timestamp}}&Signature={{signature}}&currency=btc3l,btc3s",
							"protocol": "https",
							"host": [
								"{{hostName}}"
							],
							"path": [
								"v2",
								"etp",
								"limit"
							],
							"query": [
								{
									"key": "AccessKeyId",
									"value": "{{accessKey}}"
								},
								{
									"key": "SignatureVersion",
									"value": "{{signatureVersion}}"
								},
								{
									"key": "SignatureMethod",
									"value": "{{signatureMethod}}"
								},
								{
									"key": "Timestamp",
									"value": "{{timestamp}}"
								},
								{
									"key": "Signature",
									"value": "{{signature}}"
								},
								{
									"key": "currency",
									"value": "btc3l,btc3s"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}